[["index.html", "Statistical Audit Sampling with R, 1st edition Welcome", " Statistical Audit Sampling with R, 1st edition Koen Derks 2022-12-19 Welcome Welcome to the book Statistical Audit Sampling with R, a practical guide for auditors that want to use state-of-the-art statistical methodology in their audit sampling activities. While this book focuses completely on the subject of audit sampling, it aims to discusses it from two viewpoints: the classical (frequentist) approach and the Bayesian approach. Through these two lenses, it explains the statistical theory underlying commonly applied audit sampling procedures and demonstrates how to perform these procedures in a statistically sound manner compliant with international auditing standards using the jfa (Derks 2022) R package. This website is and will always be free, licensed under the CC BY-NC-ND 3.0 License. Please keep in mind that this is a preview release and much content is still missing. If you are missing something today, then check back tomorrow: This book is actively being worked on. References "],["preface.html", "Preface", " Preface This book is intended for auditors who wish to use statistical audit sampling in their audit practice using the R programming language. It covers an array of traditional and cutting-edge statistical tools available to auditors, explaining their function, the underlying assumptions, and when they should be ideally utilized. Additionally, it provides practical suggestions for integrating advanced statistical sampling methodology into audit practice and illustrates its value through real-life case studies. We hope that this book will serve as a useful resource for auditors to properly, efficiently, and effectively utilize statistical methods in practice. The purpose of this book is to address the need for a clear and transparent description of the application of statistical sampling methodology in audit practice. In my opinion, most guidance (one notable exception is Stewart (2012)) about audit sampling (e.g., American Institute of Certified Public Accountants (AICPA) (2016a); American Institute of Certified Public Accountants (AICPA) (2016b)) lacks sufficient detail to allow for full transparency or a deep understanding. Additionally, the implementation of these methods in practice is often even less transparent, as theory and calculations are hidden from the user in commercial closed-source tools or audit guides in the form of Excel sheets used internally by audit firms. Therefore, many auditors may try to understand the theory involved in statistical audit ampling, but they often end up with more questions than they began with. This book aims to empower the auditor by providing a comprehensive explanation of the statistical methodology used in practice. This book examines audit sampling from both a classical frequentist perspective and a Bayesian perspective. Through these two lenses, it explains the statistical theory underlying commonly applied audit sampling procedures and demonstrates how to apply these procedures in a statistically sound manner compliant with international auditing standards. It also demonstrates the use of Bayesian statistical methods in auditing practice, highlighting the practical benefits these methods can bring for auditors. This book is organized as follows. Chapter 1 provides a basic introduction to the R programming language. Chapter 2 discusses the basic statistical theory underlying audit sampling. Chapter 2, 4, 5, and 6 go into more detail about using statistial methods to plan, select and evaluate audit samples. Finally, Chapter 7 discusses other R-related software implementations of audit sampling. References "],["CHAPTER-1.html", "Chapter 1 Introduction to R", " Chapter 1 Introduction to R R is a programming language and software environment for statistical computing and graphics. It is widely used among statisticians and data scientists for data analysis and data visualization and has a large and active community of users. As a result, there are many community resources available for learning and using R. This book will provide a short introduction to R but does not offer a full course on it. If you want to dive deeper into R, I recommend reading Chang (2022), Wickam and Grolemund (2017), Grolemund (2014) and Wilke (2022). In an audit context, R can be used to analyze and visualize large datasets, allowing auditors to identify trends and anomalies in the data. R is particularly useful for performing statistical analysis and testing hypotheses, which can be employed in verifying the accuracy and reliability of financial statements. R can also be used to automate certain audit procedures, reducing the time and effort required to manually review and analyze large amounts of data. Additionally, R allows auditors to easily share their work with others through the use of code and reproducible reports, enabling more efficient and collaborative audit processes. A resource that discusses these applications of R in the audit can be found in Lin (2021). We will first provide a basic introduction to R and the functionality that is required for reproducing the audit sampling examples in this book. References "],["basics.html", "1.1 Basics", " 1.1 Basics One of the basic features of R is its ability to manipulate data. In R, basic calculations work by using the standard arithmetic operators such as + for addition, - for subtraction, * for multiplication, and / for division. For example, if you want to calculate 2 + 3, you would type in 2 + 3 and R will return the result of 5. 2 + 3 #&gt; [1] 5 R also allows for more advanced calculations such as exponentiation using the ^ operator, and square roots using the sqrt() function. For example, to calculate the square root of 9, you would type in sqrt(9) and R will return the result of 3. sqrt(9) #&gt; [1] 3 You can also use parentheses to specify the order of operations in your calculations. For example, if you want to calculate (2 + 3) * 4, you would type in (2 + 3) * 4 to get the result of 20. (2 + 3) * 4 #&gt; [1] 20 Overall, basic calculations in R are similar to those in other programming languages and follow the standard order of operations. 1.1.1 Vectors In R, vectors are one-dimensional arrays of data that can hold numeric, character, or logical values. Vectors can be created using the c() function, which stands for concatenate. For example, to create a numeric vector, you can use the following code: x &lt;- c(1, 2, 3, 4, 5) To create a character vector, you can use quotes around the values: y &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;) To create a logical vector, you can use the logical values TRUE and FALSE: z &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE) Vectors can be indexed using square brackets and a numeric value. For example, to access the second element of the vector x, you can use the following code: x[2] #&gt; [1] 2 Vectors can also be subsetted using a logical vector. For example, to get all elements of the vector x that are greater than 3, you can use the following code: x[x &gt; 3] #&gt; [1] 4 5 Vectors can also be modified using indexing and assignment. For example, to change the third element of the vector x to 6, you can use the following code: x[3] #&gt; [1] 3 x[3] &lt;- 6 x[3] #&gt; [1] 6 R also has functions for performing mathematical operations on data. For example, we can use the mean() function to calculate the average of a vector of numbers, or we can use the length() function to calculate the number of elements in a vector: mean(x) #&gt; [1] 3.6 length(y) #&gt; [1] 3 Overall, vectors are a useful data structure in R for storing and manipulating data. 1.1.2 Matrices In R, a matrix is a two-dimensional collection of values that are arranged in rows and columns. You can create a matrix using the matrix() function. For example: m &lt;- matrix(1:9, nrow = 3, ncol = 3) m #&gt; [,1] [,2] [,3] #&gt; [1,] 1 4 7 #&gt; [2,] 2 5 8 #&gt; [3,] 3 6 9 This creates a 3x3 matrix with the values 1, 2, 3 in the first column, 4, 5, 6 in the second column, and 7, 8, 9 in the third column. You can also create a matrix by combining several vectors using the cbind() or rbind() functions. For example: v1 &lt;- c(1, 2, 3) v2 &lt;- c(4, 5, 6) v3 &lt;- c(7, 8, 9) m &lt;- cbind(v1, v2, v3) m #&gt; v1 v2 v3 #&gt; [1,] 1 4 7 #&gt; [2,] 2 5 8 #&gt; [3,] 3 6 9 This creates a matrix with the same values as before, but the columns are created by binding the vectors together. You can access the elements of a matrix using the square bracket notation. For example, to access the element in the second row and third column of m, you would use the following code: m[2, 3] #&gt; v3 #&gt; 8 You can also use the dim() function to get the dimensions of a matrix, and the colnames() and rownames() functions to get the names of the columns and rows, respectively. There are many other functions and operations available for working with matrices in R, including mathematical operations such as matrix multiplication and inversion. 1.1.3 Data Frames In R, a data frame is a two-dimensional table of data with rows and columns. Each row represents a single observation or record, and each column represents a particular variable or attribute. Data frames are similar to a spreadsheet in Excel or a table in a database. Each column in a data frame can have a different data type, such as numerical, character, or logical. The data in each row must match the data type of the corresponding column. To create a data frame in R, you can use the data.frame() function and pass in the data you want to include in the data frame as arguments. For example: df &lt;- data.frame(x = c(1, 2, 3), y = c(4, 5, 6)) This will create a data frame with two columns, x and y, and three rows of data. You can access the data in a data frame using indexing and subsetting. For example, to access the first row of the data frame, you can use the following command: df[1, ] #&gt; x y #&gt; 1 1 4 To access a specific column, you can use the $ operator (or the index): df$x #&gt; [1] 1 2 3 df[, 1] #&gt; [1] 1 2 3 You can also use functions like head() and tail() to view the first or last few rows of a data frame. Data frames also have several built-in functions that allow you to manipulate and analyze the data. For example, you can use the summarize() function to calculate summary statistics for each column, or the group_by() function to group the data by a specific variable and apply a function to each group. "],["packages.html", "1.2 Packages", " 1.2 Packages In addition to these basic features, R has many packages and libraries that extend its capabilities and provide additional functions and tools for data analysis and visualization. A package is a small bundle of code that an R user (or group of users) wrote and uploaded to a central server for everybody to access, download and use. Some popular packages include dplyr for data manipulation, ggplot2 for data visualization, and caret for machine learning. With its versatility and robust community, R is a valuable tool for anyone working with data. If you want to know more about making your own package, read Wickam and Brian (2022). 1.2.1 Installing a Package In many cases, you will download an R package from the CRAN server. This can be done via the install.packages() function by providing the package name in quotes. For example, an important package for data visualization is ggplot2. To install this package, you can simply run: install.packages(&quot;ggplot2&quot;) To illustrate its concepts and ideas, this book heavily draws from the jfa package, an R package for statistical auditing, which can also be downloaded from CRAN. Before running the examples in this book, you should install this package by running the following command in R: install.packages(&quot;jfa&quot;) 1.2.2 Loading a Package Once you have installed a package, you must load it into every R session. To load a package into your R session, call library() and provide the name of the package (without quotes) that you want to load. For example, before running the examples in this book, you can load the jfa package with: library(jfa) If you want a deeper understanding of how the jfa package works, or want to look at the source code of the package, see the package website. 1.2.3 Updating a Package R packages are updated regularly. To update a package in your R library you should call update.packages() and provide the name of the package that you want to update in quotes. For example, each time there is a new release of the **jfa* package, you can update it by running: update.packages(&quot;jfa&quot;) References "],["loading-data.html", "1.3 Loading Data", " 1.3 Loading Data 1.3.1 Loading Data from a CSV File A commonly used data type is a .csv file. You can load this type of files via the read.csv() function. For example, if the file example.csv is in the current working directory, you can load it by running: read.csv(&quot;example.csv&quot;) 1.3.2 Loading Data from an Excel File Another commonly used data type are Excel files. You can load this type of files via the read_excel() function from the readxl package. For this to work, you should first install this package using the install.packages() command and load it into the R session using a call to library(). For example, if the file example.xlsx is in the current working directory, and the data you want to load is on the first worksheet, you can load it by running: install.packages(&quot;readxl&quot;) library(readxl) read_excel(&quot;example.csv&quot;, sheet = 1) "],["CHAPTER-2.html", "Chapter 2 Background Information", " Chapter 2 Background Information Auditors use audit sampling as a way to evaluate a portion of transactions or items within a population in order to make conclusions about the population as a whole. It is a cost-effective method for testing the accuracy and reliability of financial information because it allows auditors to test a representative sample of the population instead of the entire population. In the realm of auditing, sampling becomes necessary when the truth about a population is not readily accessible or discernible through other means. With the advent of modern technology, auditors often have access to an abundance of information about a population, which sometimes enables them to perform integral testing. Nonetheless, there are situations where a sample is still necessary due to the unavailability of complete data. For instance, an auditor may utilize analytical procedures to verify the consistency of payments with payment orders, but then must subsequently confirm the validity of these orders through detailed testing. In auditing, there are two primary methods of sampling: statistical and non-statistical. Statistical sampling involves using probability theory to select a sample from the population and draw conclusions about the population based on the sample. Non-statistical sampling, on the other hand, is based on the auditor’s professional judgment and does not use statistical inference to come to a conclusion. This book does not cover non-statistical sampling. The way that statistical sampling should be performed is prescribed by international auditing standards. The next section discusses what these standards say about statistical sampling.. "],["auditing-standards.html", "2.1 Auditing Standards", " 2.1 Auditing Standards There are three auditing standards related to staistical audit sampling: ISA 530: Auditing standard for international firms published by the International Auditing and Assurance Standards Board (IAASB). AU-C 530: Auditing standard for private firms published by the American Institute of Certified Public Accountants (AICPA). AS 2315: Auditing standard for public firms published by the Public Company Accounting Oversign Board (PCAOB). All three standards describe statistical sampling in a similar manner. For example, ISA 530 (International Auditing and Assurance Standards Board (IAASB) 2018) describes statistical audit sampling as an approach that, at least, has the following two characteristics: Random selection of sample items, The use of an appropriate statistical technique to evaluate sample results, including measurement of sampling risk Any sampling approach that does not have these characteristics is considered nonstatistical sampling by the auditing standards. In practice, statistical sampling should be used in a way that is tailored to the specific circumstances of the audit. This may include considering factors such as the size and complexity of the population, the materiality of the items being tested, and the degree of inherent risk in the audit area. The auditor should also document the sampling process in order to demonstrate that it was conducted compliant with auditing standards. The next section discusses these important concepts in statistical audit sampling. References "],["important-concepts.html", "2.2 Important Concepts", " 2.2 Important Concepts In this section, we discuss some important theoretical concepts that play a key role in statistical audit sampling. 2.2.1 Materiality In an audit, materiality is the maximum amount of misstatement that can be present in the financial statements of the auditee before the auditor concludes that the financical statements are materially misstated, meaning that they contains misstatements that would influence the decisions of stakeholders relying on those statements. The term performance materiality refers to the maximum amount of misstatement that can be present in a given population that is part of the financial statements before the auditor concludes that the population is materially misstated. Performance materiality is used by auditors to determine the appropriate level of testing to be performed on a population. The performance materiality is usually defined to be lower than the materiality because an individual population that is subject to audit sampling is often only a (small) part of the financial statements. For example, consider an audit of a company’s financial statements for the year ended December 31, 2021. The auditor determines that the company’s accounts receivable balance is a large part of to the financial statements and decides to test a sample of the accounts receivable transactions to assess the accuracy of the balance. The auditor calculates the performance materiality for the accounts receivable balance by considering the materiality for the financial statements as a whole. If the auditor finds misstatements in the sample such that their estimate of the misstatement exceeds the performance materiality, the auditor would need to express an unqualified opinion on the population or would need to perform additional testing on the population. If the auditor finds misstatements in the sample such that their estimate of the misstatement does not exceed the performance materiality, the auditor would express a positive opinion on the financial statements. 2.2.2 Audit risk After completing an audit and making any necessary corrections, an auditor will issue a written report stating whether the financial statements are accurate and free of material misstatement. The potential for this opinion to be incorrect is known as audit risk, and it is the auditor’s job to minimize this risk as much as possible. For example, during an audit of a company’s financial statements, the auditor may carefully review documentation, perform tests of details via audit sampling, and speak with management in order to reduce the audit risk and provide a reliable opinion on the accuracy of the financial statements as a whole. 2.2.3 Population In statistical inference, the term population refers to the entire group of individuals or items that have some common characteristic or interest, and about which we want to gather data or make inferences. A population can be as large as all the people in a country or, as is more sensible in auditing, as small as a group of employees in a specific department of a company. For example, consider an audit of a company’s payroll records. The population in this case would be all the employees of the company, and the goal of the audit would be to gather data on their salaries, benefits, and other payroll-related information. The audit team would collect this data from a a representative group of employees (i.e., a sample) of the population and use statistical methods to draw conclusions about the entire population. 2.2.4 Sampling risk There is a possibility that the results of an audit based on a sample may differ from the results if the entire population were examined using the same procedures. This is known as sampling risk. Sampling risk can result in two types of incorrect conclusions: The first type is when, in a test of controls, the controls are perceived to be more effective than they actually are, or in a test of details, a material misstatement is believed to not exist when it actually does. This type of erroneous conclusion is particularly concerning for auditors because it can compromise the effectiveness of the audit and may lead to an inappropriate audit opinion. The second type of incorrect conclusion is when, in a test of controls, the controls are perceived to be less effective than they actually are, or in a test of details, a material misstatement is believed to exist when it actually does not. This type of erroneous conclusion impacts the efficiency of the audit as it may require additional work to determine that the initial conclusions were incorrect. Many audits are performed according to the audit risk model (ARM), which determines that the uncertainty about the auditor’s statement as a whole is a factor of three terms: the inherent risk, the control risk, and the detection risk (i.e., the sampling risk). Inherent risk is the risk posed by a misstatement in the auditees financial statements that could be material, before consideration of any related control systems (e.g., computer systems). Control risk is the risk that a material misstatement is not prevented or detected by the auditee’s internal control systems. Detection risk is the risk that the auditor will fail to find material misstatements that exist in the auditee’s financial statements. The ARM is practically useful because, for a given level of audit risk, the tolerable detection risk bears an inverse relation to the other two risks. \\[\\begin{equation} \\text{Audit risk} = \\text{Inherent risk} \\times \\text{Control risk} \\times \\text{Detection risk} \\end{equation}\\] Usually the auditor judges inherent risk and control risk on a three-point scale consisting of low, medium, and high. Different audit firms handle different standard percentages for these categories. Given an assessment of the inherent risk and the control risk, the detection risk can be calculated as: \\[\\begin{equation} \\text{Detection risk} = \\frac{\\text{Audit risk}}{\\text{Inherent risk} \\times \\text{Control risk}} \\end{equation}\\] The ARM is commonly used in practice, but is not a proper model of audit risk. For example, it is not possible to set one of the risks to 0, since that would result in an infinite detection risk (\\(\\frac{0.05}{0 \\times 1} = \\infty\\)). Let’s consider an example. Suppose that, in their audit guide, an audit firm associates the following percentages with the categories high, medium and low: High: 100% Medium: 60% Low: 50% If an auditor is working with an audit risk of 5%, and judges inherent and control risk to both be medium, the sampling risk can be calculated as: \\[\\begin{equation} \\frac{0.05}{0.6 \\times 0.6} = 0.139 \\end{equation}\\] 2.2.5 Sample Size The sample size is an important consideration in the context of audit sampling, as it determines the number of items that will be selected for testing during the audit process. This factor has an impact on both effectiveness and efficiency. In general, a larger sample size can provide a higher level of assurance, but it requires more audit effort to obtain and inspect. On the other hand, a smaller sample size offers a lower level of assurance, but it is less costly. 2.2.6 notation The table below summarizes the notation used in this book and in jfa. Meaning Symbol jfa Probability of misstatement \\(\\theta\\) Performance materiality \\(\\theta_{max}\\) materiality Expected deviation rate \\(\\theta_{exp}\\) expected Type-I error probability \\(\\alpha\\) 1 - conf.level Type-II error probability \\(\\beta\\) Population size \\(N\\) N.units Population misstatements \\(K\\) Sample size \\(n\\) n Observed misstatements \\(k\\) x "],["classical-inference.html", "2.3 Classical Inference", " 2.3 Classical Inference Frequentist statistics, also known as classical statistics, is a statistical framework that is based on the concept of probability as a long-term frequency of events. This approach assumes that statistical models are purely objective and that data is generated by a well-defined process, which can be described by a set of probabilistic assumptions. The philosophy behind frequentist statistics is that statistical estimates should be based on the frequency of events in a population, rather than on subjective or personal beliefs. This approach is particularly useful for making predictions or making decisions based on data, as it allows for the calculation of confidence intervals and statistical tests, which provide a measure of the reliability of the estimates. Overall, frequentist statistics is a rigorous and reliable approach that is widely used in the scientific community for making informed decisions based on data. 2.3.1 Parameter Estimation The philosophy behind frequentist parameter estimation is based on the idea that statistical parameters are fixed, but unknown, quantities that can be estimated through the process of repeated sampling. This approach assumes that the sample data represent a random sample from a larger population, and that the sample statistics (i.e., the sample proportion of misstatements) can be used to estimate the corresponding population parameters (i.e., the population misstatement). The key principle of frequentist estimation is that the estimated parameter values should be unbiased and have a certain level of precision, which can be quantified through statistical measures such as confidence bounds or intervals. 2.3.2 Hypothesis Testing Frequentist hypothesis testing is a statistical method that involves evaluating the probability of obtaining a certain sample outcome or more extreme, given a certain assumption or hypothesis. This probability, known as the p value, is used to determine the likelihood of the hypothesis being true. For example, in a typical audit sampling hypothesis test using the binomial distribution, we may be interested in testing the hypothesis that the misstatement is higher or lower than the performance materiality. We would inspect a sample and calculate the p value based on the observed frequency of misstatements versus the expected frequency under the assumption of material misstatement. If the p value is below the sampling risk \\(\\alpha\\), we reject the hypothesis that the population is materially misstated and conclude that it is not materially misstated. 2.3.3 Example As an example, the binom.test() function in R can be used to test if a population contains less than 3 percent misstatements. Suppose an auditor obtained a sample of \\(n = 100\\) items containing \\(k = 0\\) misstatements. To use the binom.test() function, the auditor must input the number of items in the sample n = 100, the number of misstatements in the sample x = 0, and the hypothesized proportion of misstatement in the population (i.e., the performance materiality) p = 0.03. The sampling risk is set to 5%, which the auditor can provide to the function with conf.level = 1 - 0.05. Finally, the auditor can specify the alternative hypothesis as alternative = \"less\" to test if the proportion of misstatements in the sample is less than the hypothesized proportion. binom.test(x = 0, n = 100, p = 0.03, alternative = &quot;less&quot;, conf.level = 0.95) #&gt; #&gt; Exact binomial test #&gt; #&gt; data: 0 and 100 #&gt; number of successes = 0, number of trials = 100, p-value = 0.04755 #&gt; alternative hypothesis: true probability of success is less than 0.03 #&gt; 95 percent confidence interval: #&gt; 0.00000000 0.02951305 #&gt; sample estimates: #&gt; probability of success #&gt; 0 The most likely misstatement in the population is displayed under sample estimates and is 0%. The 95% upper confidence bound for the estimate of the population misstatement is displayed under 95 percent confidence interval and is 2.95%. The p value is shown to be 0.04755. Since the p value is lower than the specified sampling risk \\(\\alpha\\), the auditor can reject the hypothesis of material misstatement. "],["bayesian-inference.html", "2.4 Bayesian Inference", " 2.4 Bayesian Inference Bayesian inference is based on the idea that the parameters in a statistical model are not fixed but uncertain. In this approach, the parameter is onsidered to be a random variable with a certain distribution, and the goal is to use the data and any prior knowledge about the parameter to update our belief about its value. This is typically done using Bayes’ theorem, which states that the posterior probability (i.e., the updated belief about the parameter after seeing the data) is equal to the prior probability (i.e., the belief about the parameter before seeing the data) times the likelihood (i.e., the probability of the data given the parameter). \\[\\begin{equation} \\text{Posterior} \\propto \\text{Likelihood} \\times \\text{Prior} \\end{equation}\\] Bayesian statistics is a more nuanced approach that allows for more efficiency in statistical audit sampling, but it requires the specification of prior distributions that can be difficult to quantify. That is because, especially in an audit, all information that is incorporated into the statistical analysis should be based on audit evidence and should be properly justified. 2.4.1 Parameter Estimation One major difference between classical and Bayesian statistics is the way they handle uncertainty. In classical statistics, uncertainty is represented by the standard error of an estimate, which is a measure of the precision of an estimate. In Bayesian statistics, uncertainty is represented by the posterior distribution, which is a distribution of the possible values of the population parameter given the sample data and our prior beliefs. Bayesian inferences uses uses Bayes’ theorem to update the prior beliefs about the population parameter with the new information from the sample data. Bayes’ theorem is given by the following formula: \\[\\begin{equation} p(\\theta | y) = \\frac{p(y | \\theta)p(\\theta)}{p(y)} \\end{equation}\\] where \\(p(\\theta | y)\\) is the posterior probability of the population parameter \\(\\theta\\) given the sample data \\(y\\), \\(p(y | \\theta)\\) is the likelihood of the sample data given \\(\\theta\\), \\(p(\\theta)\\) is the prior probability of \\(\\theta\\), and \\(p(y)\\) is the total probability of the sample data occurring. Because with a fixed sample \\(p(y)\\) is a constant, Bayes’ theorem is often given as follows: \\[\\begin{equation} p(\\theta | y) \\propto p(y | \\theta) \\times p(\\theta) \\end{equation}\\] 2.4.2 Hypothesis Testing The Bayes factor is a measure used in Bayesian inference to compare the relative strength of evidence between two competing hypotheses. The Bayes factor is calculated by comparing the probability of the observed data given each of the two competing hypotheses. This probability is known as the likelihood of the data. The Bayes factor is then the ratio of the likelihood of the data under one hypothesis to the likelihood of the data under the other hypothesis. The Bayes factor can be used in the context of an audit, where the auditor is trying to determine the likelihood that a particular financial statement is represented fairly or not. For example, an auditor might be evaluating the fairness of a company’s financial statements for the year. They have two hypotheses: the first is that the statements are accurate, and the second is that the statements are not accurate. The auditor gathers data from a statistical audit sample and uses this data to calculate the Bayes factor. The Bayes factor is calculated by taking the ratio of the probability of the first hypothesis (that the statements are accurate) given the observed data, to the probability of the second hypothesis (that the statements are not accurate) given the observed data. The higher the Bayes factor, the more likely it is that the first hypothesis is true. The Bayes factor can be used to assess the strength of evidence for one hypothesis over the other and to determine which hypothesis is more likely to be true given the observed data. It is often used in scientific research to help evaluate the validity of different hypotheses and to make informed decisions based on the available evidence. For auditors, the Bayes factor can be a useful tool to determine the likelihood of different hypotheses being true based on the data they have collected, and it can help them make informed decisions about the fairness of the financial statements. For example, if the Bayes factor is 5, this means that the probability of the statements being accurate given the observed data is 5 times higher than the probability of them being not accurate. In this case, the auditor would be more likely to conclude that the financial statements are accurate. The jfa package can help us to calculate Bayes factors for and against the hypothesis that the financial statements are represented fairly. "],["CHAPTER-3.html", "Chapter 3 Planning a Sample", " Chapter 3 Planning a Sample One of the key considerations in audit sampling is determining the minimum sample size required to achieve a desired level of assurance or precision. In this chapter, we will discuss how to use three standard likelihoods to plan a minimum sample size for audit sampling: the hypergeometric likelihood, the binomial likelihood and the Poisson likelihood. "],["required-information.html", "3.1 Required Information", " 3.1 Required Information First, planning a minimum sample requires knowledge of the conditions that lead to acceptance or rejection of the population (i.e., the sampling objectives). Typically, sampling objectives can be classified into one or both of the following: Hypothesis testing: The goal of the sample is to obtain evidence for or against the claim that the misstatement in the population is lower than a given value (i.e., the performance materiality). Estimation: The goal of the sample is to obtain an accurate estimate of the misstatement in the population (with a minimum precision). Second, it is advised to specify the expected (or tolerable) misstatements in the sample. The expected misstatements are the misstatements that you allow in the sample, while still retaining the desired amount of assurance about the population. It is strongly recommended to set the value for the expected misstatements in the sample conservatively to minimize the chance of the observed misstatements in the sample exceeding the expected misstatements, which would imply that insufficient work has been done in the end. Finally, next to determining the sampling objective(s) and the expected misstatements, it is important to determine the statistical distribution linking the sample outcomes to the population misstatement. This distribution is called the likelihood (i.e., poisson, binomial, orhypergeometric). All three aforementioned likelihoods are commonly used in an audit sampling context, however, poisson is the default likelihood in jfa because it is the most conservative of the three. In the subsections below, we elaborate on the three standard likelihoods for audit sampling and demonstrate how they can be used to obtain a minimum sample size. "],["the-hypergeometric-likelihood.html", "3.2 The Hypergeometric Likelihood", " 3.2 The Hypergeometric Likelihood Let’s consider how to use the hypergeometric likelihood to calculate the minimum sample size needed to achieve a desired level of assurance. The hypergeometric distribution is a discrete probability distribution that is commonly used to model the number of events occurring in a fixed number of trials when the population size is known. For our purpose, we can use the hypergeometric distribution as a likelihood to model the number of misstatements that are expected to be found in the sample. The probability mass function (PMF) of the hypergeometric distribution is given by: \\[\\begin{equation} p(X=k)=\\frac{\\binom{K}{k}\\binom{N-K}{n-k}}{\\binom{N}{n}}, \\end{equation}\\] where \\(k\\) is the number of misstatements in the sample, \\(n\\) is the sample size, \\(N\\) is the population size and \\(K\\) is the total number of misstatements assumed in the population. The assumed misstatements \\(K\\) is a linear extrapolation of the assumed misstatement rate in the population \\(\\theta_{max}\\) to the total population: \\[\\begin{equation} K = \\theta_{max} N. \\end{equation}\\] 3.2.1 Classical planning Concretely, the following statistical model is assumed: \\[\\begin{equation} k \\sim \\text{Hypergeometric}(n, N, K) \\end{equation}\\] Given a desired misstatement tolerance \\(\\theta_{max}\\), we can solve for the minimum sample size \\(n\\) needed to achieve this assurance level. In jfa, this sample size can be calculated using the planning() function. For example, if we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\) in a population of \\(N=1000\\) items, then the required sample size under the assumption of zero expected misstatements in the sample is \\(n = 94\\). planning(materiality = 0.03, expected = 0, conf.level = 0.95, likelihood = &quot;hypergeometric&quot;, N.units = 1000) #&gt; #&gt; Classical Audit Sample Planning #&gt; #&gt; minimum sample size = 94 #&gt; sample size obtained in 95 iterations via method &#39;hypergeometric&#39; The dhyper() function calculates the probability of observing \\(k\\) missatements in a sample of \\(n\\) items given an assumed misstatement probability. The sample size of 94 can be confirmed by checking that 94 is the minimum integer that results in less than 5% probability of finding 0 misstatements if the population misstatement is truly 3%. K &lt;- ceiling(0.03 * 1000) dhyper(x = 0, m = K, n = 1000 - K, k = 93) &lt; 0.05 # 93: Not sufficient #&gt; [1] FALSE dhyper(x = 0, m = K, n = 1000 - K, k = 94) &lt; 0.05 # 94: Sufficient #&gt; [1] TRUE We can make this visually intuitive by showing the hypergeometric(\\(k\\) | 94, 1000, 30) distribution and highlighting the probability for \\(k = 0\\). This probability should be lower than the required sampling risk \\(\\alpha = 0.05\\). As another example, if we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\) in a population of \\(N=1000\\) items, then the required sample size under the assumption of one expected misstatement in the sample is \\(n = 147\\). planning(materiality = 0.03, expected = 1, conf.level = 0.95, likelihood = &quot;hypergeometric&quot;, N.units = 1000) #&gt; #&gt; Classical Audit Sample Planning #&gt; #&gt; minimum sample size = 147 #&gt; sample size obtained in 146 iterations via method &#39;hypergeometric&#39; Once again, the sample size of 147 can be confirmed by checking that 147 is the minimum integer that results in less than 5% probability of finding 0 or 1 misstatements if the population misstatement is truly 3%. sum(dhyper(x = 0:1, m = K, n = 1000 - K, k = 146)) &lt; 0.05 # 146: Not sufficient #&gt; [1] FALSE sum(dhyper(x = 0:1, m = K, n = 1000 - K, k = 147)) &lt; 0.05 # 147: Sufficient #&gt; [1] TRUE Like before, we can make this visually intuitive by showing the hypergeometric(\\(k\\) | 147, 1000, 30) distribution and highlighting the probabilities for \\(k = 0\\) and \\(k = 1\\). The sum of these probabilities should be lower than the required sampling risk \\(\\alpha = 0.05\\). 3.2.2 Bayesian Planning Performing Bayesian planning with the hypergeometric likelihood (Dyer and Pierce 1993) requires that you specify a prior distribution for the parameter \\(\\theta\\). Practically, this means that you should provide an input for the prior argument in the planning() function. Setting prior = TRUE performs Bayesian planning using a default prior conjugate to the specified likelihood (i.e., a beta-binomial prior). Concretely, this means that the following statistical model is assumed: \\[\\begin{align} k &amp;\\sim \\text{Hypergeometric}(n, N, K) \\\\ K &amp;\\sim \\text{Beta-binomial}(N, \\alpha, \\beta) \\end{align}\\] The beta-binomial prior distribution is conjugate to the hypergeometric likelihood (see this list of conjugate priors), which means that the posterior distribution of \\(K\\) can be determined analytically. For example, if the prior distribution for \\(K\\) is beta-binomial(\\(N\\), \\(\\alpha\\), \\(\\beta\\)) and the auditor has observed a sample of \\(n\\) items containing \\(k\\) misstatements, the posterior distribution for \\(K\\) is beta-binomial(\\(N - n\\), \\(\\alpha + k\\), \\(\\beta + n - k\\)). For example, the command below uses a default beta-binomial(\\(N\\), 1, 1) prior distribution to plan the sample, since planning() is given the hypergeometric likelihood. If we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\) in a population of \\(N=1000\\) items, then the required sample size under the assumption of zero expected misstatements in the sample is \\(n = 93\\). plan &lt;- planning(materiality = 0.03, expected = 0, conf.level = 0.95, likelihood = &quot;hypergeometric&quot;, N.units = 1000, prior = TRUE) summary(plan) #&gt; #&gt; Bayesian Audit Sample Planning Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Population size: 1000 #&gt; Materiality: 0.03 #&gt; Hypotheses: H₀: Θ &gt; 0.03 vs. H₁: Θ &lt; 0.03 #&gt; Expected: 0 #&gt; Likelihood: hypergeometric #&gt; Prior distribution: beta-binomial(N = 1000, α = 1, β = 1) #&gt; #&gt; Results: #&gt; Minimum sample size: 93 #&gt; Tolerable errors: 0 #&gt; Posterior distribution: beta-binomial(N = 907, α = 1, β = 94) #&gt; Expected most likely error: 0 #&gt; Expected upper bound: 0.029 #&gt; Expected precision: 0.029 #&gt; Expected BF₁₀: 620.58 You can inspect how the prior distribution compares to the expected posterior distribution by using the plot() function. The expected posterior distribution is the posterior distribution that would occur if you actually observed the planned sample containing the expected misstatements. plot(plan) The hypergeometric likelihood does not allow for non-conjugate prior distributions to be used as a prior. References "],["the-binomial-likelihood.html", "3.3 The Binomial Likelihood", " 3.3 The Binomial Likelihood Let’s consider how to use the binomial likelihood to calculate the minimum sample size needed to achieve a desired level of assurance. The binomial distribution is a discrete probability distribution that is commonly used to model the number of events occurring in a fixed number of trials. For our purpose, we can use the binomial distribution as a likelihood to model the number of misstatements that are expected to be found in the sample. In audit sampling, the binomial likelihood is often used to approximate the hypergeometric likelihood since it is easier to work with (i.e., it only has two parameters: \\(\\theta\\) and \\(n\\), while the hypergeometric has three: \\(n\\), \\(N\\), and \\(K\\)). However, the binomial likelihood is more conservative than the hypergeometric likelihood, meaning that resulting sample sizes will be higher. The probability mass function (PMF) of the binomial distribution is given by: \\[\\begin{equation} p(k; n, \\theta) = \\binom{n}{k} \\theta^{k} (1-\\theta)^{n - k}, \\end{equation}\\] where \\(k\\) is the number of misstatements in the sample, \\(n\\) is the sample size and \\(\\theta\\) is the misstatement rate expected in the sample. 3.3.1 Classical Planning Concretely, the following statistical model is assumed: \\[\\begin{equation} k \\sim \\text{Binomial}(n, \\theta_{max}) \\end{equation}\\] Given a desired misstatement tolerance \\(\\theta_{max}\\), we can solve for the minimum sample size \\(n\\) needed to achieve the desired assurance level. A useful trick to utilize is that, if we do not expect any misstatements in the sample, the formula for the minimum required sample size reduces to: \\[\\begin{equation} n = \\lceil\\frac{\\ln(\\alpha)}{\\ln(1 - \\theta_{max})}\\rceil. \\end{equation}\\] \\(\\lceil...\\rceil\\) is the ceiling function. Hence, \\(\\lceil1.2\\rceil = 2\\). For example, if we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\), then the required sample size under the assumption of zero expected misstatements in the sample is \\(n = 99\\). ceiling(log(1 - 0.95) / log(1 - 0.03)) #&gt; [1] 99 In jfa, this sample size can be replicated using the planning() function. planning(materiality = 0.03, expected = 0, conf.level = 0.95, likelihood = &quot;binomial&quot;) #&gt; #&gt; Classical Audit Sample Planning #&gt; #&gt; minimum sample size = 99 #&gt; sample size obtained in 100 iterations via method &#39;binomial&#39; The dbinom() function calculates the probability of observing \\(k\\) missatements in a sample of \\(n\\) items given an assumed misstatement probability. The sample size of 99 can be confirmed by checking that 99 is the minimum integer that results in less than 5% probability of finding 0 misstatements if the population misstatement is truly 3%. dbinom(x = 0, size = 98, prob = 0.03) &lt; 0.05 # 98: Not sufficient #&gt; [1] FALSE dbinom(x = 0, size = 99, prob = 0.03) &lt; 0.05 # 99: Sufficient #&gt; [1] TRUE We can make this visually intuitive by showing the binomial(\\(k\\) | 99, 0.03) distribution and highlighting the probability for \\(k = 0\\). This probability should be lower than the required sampling risk \\(\\alpha = 0.05\\). However, if the number of expected misstatements in the sample is non-zero, it becomes more difficult to solve the formula for \\(n\\). Hence, we can iteratively try every value of \\(n\\) and return the smallest integer that satisfies the sampling objectives. In jfa, this can be done by adjusting the expected argument in the planning() function. For example, if we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\), then the required sample size under the assumption of one expected misstatement in the sample is \\(n = 157\\). planning(materiality = 0.03, expected = 1, conf.level = 0.95, likelihood = &quot;binomial&quot;) #&gt; #&gt; Classical Audit Sample Planning #&gt; #&gt; minimum sample size = 157 #&gt; sample size obtained in 156 iterations via method &#39;binomial&#39; Once again, the sample size of 157 can be confirmed by checking that 157 is the minimum integer that results in less than 5% probability of finding 0 or 1 misstatements if the population misstatement is truly 3%. sum(dbinom(x = 0:1, size = 156, prob = 0.03)) &lt; 0.05 # 156: Not sufficient #&gt; [1] FALSE sum(dbinom(x = 0:1, size = 157, prob = 0.03)) &lt; 0.05 # 157: Sufficient #&gt; [1] TRUE Like before, we can make this visually intuitive by showing the binomial(\\(k\\) | 157, 0.03) distribution and highlighting the probabilities for \\(k = 0\\) and \\(k = 1\\). The sum of these probabilities should be lower than the required sampling risk \\(\\alpha = 0.05\\). 3.3.2 Bayesian Planning Performing Bayesian planning with the binomial likelihood requires that you specify a prior distribution for the parameter \\(\\theta\\). Practically, this means that you should provide an input for the prior argument in the planning() function. Setting prior = TRUE performs Bayesian planning using a default prior conjugate to the specified likelihood (i.e., a beta prior). Concretely, this means that the following statistical model is assumed: \\[\\begin{align} k &amp;\\sim \\text{Binomial}(n, \\theta) \\\\ \\theta &amp;\\sim \\text{Beta}(\\alpha, \\beta) \\end{align}\\] The beta prior distribution is conjugate to the binomial likelihood (see this list of conjugate priors), which means that the posterior distribution of \\(\\theta\\) can be determined analytically. For example, if the prior distribution is beta(\\(\\alpha\\), \\(\\beta\\)) and the auditor has observed a sample of \\(n\\) items containing \\(k\\) misstatements, the posterior distribution for \\(\\theta\\) is beta(\\(\\alpha + k\\), \\(\\beta + n - k\\)). For example, the command below uses a default beta(\\(\\alpha=1\\), \\(\\beta=1\\)) prior distribution to plan the sample, since planning() is given the binomial likelihood. If we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\), then the required sample size under the assumption of zero expected misstatements in the sample is \\(n = 98\\). plan &lt;- planning(materiality = 0.03, expected = 0, conf.level = 0.95, likelihood = &quot;binomial&quot;, prior = TRUE) summary(plan) #&gt; #&gt; Bayesian Audit Sample Planning Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Materiality: 0.03 #&gt; Hypotheses: H₀: Θ &gt; 0.03 vs. H₁: Θ &lt; 0.03 #&gt; Expected: 0 #&gt; Likelihood: binomial #&gt; Prior distribution: beta(α = 1, β = 1) #&gt; #&gt; Results: #&gt; Minimum sample size: 98 #&gt; Tolerable errors: 0 #&gt; Posterior distribution: beta(α = 1, β = 99) #&gt; Expected most likely error: 0 #&gt; Expected upper bound: 0.029807 #&gt; Expected precision: 0.029807 #&gt; Expected BF₁₀: 627.22 You can inspect how the prior distribution compares to the expected posterior distribution by using the plot() function. The expected posterior distribution is the posterior distribution that would occur if you actually observed the planned sample containing the expected misstatements. plot(plan) The input for the prior argument can also be an object created by the auditPrior function. If planning() receives a prior for which there is no conjugate likelihood available, it will numerically derive the posterior distribution. For example, the command below uses a Normal(0, 0.05) prior distribution to plan the sample using the binomial likelihood. Concretely, this means that the following statistical model is assumed: \\[\\begin{align} k &amp;\\sim \\text{Binomial}(n, \\theta) \\\\ \\theta &amp;\\sim \\text{Normal}(\\mu = 0, \\sigma = 0.05) \\end{align}\\] prior &lt;- auditPrior(method = &quot;param&quot;, likelihood = &quot;normal&quot;, alpha = 0, beta = 0.05) plan &lt;- planning(materiality = 0.03, expected = 0, conf.level = 0.95, likelihood = &quot;poisson&quot;, prior = prior) summary(plan) #&gt; #&gt; Bayesian Audit Sample Planning Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Materiality: 0.03 #&gt; Hypotheses: H₀: Θ &gt; 0.03 vs. H₁: Θ &lt; 0.03 #&gt; Expected: 0 #&gt; Likelihood: poisson #&gt; Prior distribution: normal(μ = 0, σ = 0.05)T[0,1] #&gt; #&gt; Results: #&gt; Minimum sample size: 90 #&gt; Tolerable errors: 0 #&gt; Posterior distribution: Determined via MCMC sampling #&gt; Expected most likely error: 0.0008648 #&gt; Expected upper bound: 0.029029 #&gt; Expected precision: 0.028164 #&gt; Expected BF₁₀: 19.08 The resulting sample size under this prior is \\(n = 90\\), a reduction of 8 samples when compared to the default beta(1, 1) prior distribution. plot(plan) "],["the-poisson-likelihood.html", "3.4 The Poisson Likelihood", " 3.4 The Poisson Likelihood Let’s consider how to use the Poisson likelihood to calculate the minimum sample size needed to achieve a desired level of assurance. The Poisson distribution is a discrete probability distribution that is commonly used to model the number of events occurring in a fixed time or space. We can use the Poisson distribution as a likelihood to model the number of misstatements that are expected to be found in the sample. In audit sampling, the Poisson likelihood is often used to approximate the binomial likelihood since it is easier to work with (i.e., it only has one parameter: \\(\\lambda\\), while the binomial has two parameters: \\(\\theta\\) and \\(n\\)). However, the Poisson likelihood is more conservative than the binomial likeliood, meaning that resulting sample sizes will be higher. The probability mass function (PMF) of the Poisson distribution is given by: \\[\\begin{equation} p(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}, \\end{equation}\\] where \\(k\\) is the number of misstatements in the sample, and \\(\\lambda\\) is the average number of misstatements expected in the sample. The average number of misstatements is related to the misstatement rate in the population, denoted by \\(\\theta\\), and the sample size, \\(n\\), by the following equation: \\[\\begin{equation} \\lambda=n\\theta. \\end{equation}\\] 3.4.1 Classical planning Concretely, the following statistical model is assumed: \\[\\begin{equation} k \\sim \\text{Poisson}(n\\theta_{max}) \\end{equation}\\] Given a desired misstatement tolerance \\(\\theta_{max}\\) and the Poisson likelihood, we can solve for the minimum sample size \\(n\\) needed to achieve a assurance level. A useful trick to utilize is that, if we do not expect any misstatements in the sample, the formula for the required sample size reduces to: \\[\\begin{equation} n = \\lceil-\\frac{\\ln(\\alpha)}{\\theta_{max}}\\rceil. \\end{equation}\\] \\(\\lceil...\\rceil\\) is the ceiling function. Hence, \\(\\lceil1.2\\rceil = 2\\). For example, if we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\), then the required sample size under the assumption of zero expected misstatements in the sample is \\(n = 100\\). ceiling(-log(1 - 0.95) / 0.03) #&gt; [1] 100 In jfa, this sample size can be replicated using the planning() function. planning(materiality = 0.03, expected = 0, conf.level = 0.95, likelihood = &quot;poisson&quot;) #&gt; #&gt; Classical Audit Sample Planning #&gt; #&gt; minimum sample size = 100 #&gt; sample size obtained in 101 iterations via method &#39;poisson&#39; The dpois() function calculates the probability of observing \\(k\\) missatements in a sample of \\(n\\) items given an assumed misstatement probability. The sample size of 100 can be confirmed by checking that 100 is the minimum integer that results in less than 5% probability of finding 0 misstatements if the population misstatement is truly 3%. dpois(x = 0, lambda = 99 * 0.03) &lt; 0.05 # 99: Not sufficient #&gt; [1] FALSE dpois(x = 0, lambda = 100 * 0.03) &lt; 0.05 # 100: Sufficient #&gt; [1] TRUE We can make this visually intuitive by showing the Poisson(\\(k\\) | 100 * 0.03) distribution and highlighting the probability for \\(k = 0\\). This probability should be lower than the required sampling risk \\(\\alpha = 0.05\\). However, if the number of expected misstatements in the sample is non-zero, it becomes more difficult to solve the formula for \\(n\\). Hence, we can iteratively try every value of \\(n\\) and return the smallest integer that satisfies the sampling objectives. In jfa, this can be done by adjusting the expected argument in the planning() function. For example, if we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\), then the required sample size under the assumption of one expected misstatement in the sample is \\(n = 159\\). planning(materiality = 0.03, expected = 1, conf.level = 0.95, likelihood = &quot;poisson&quot;) #&gt; #&gt; Classical Audit Sample Planning #&gt; #&gt; minimum sample size = 159 #&gt; sample size obtained in 158 iterations via method &#39;poisson&#39; Once again, the sample size of 159 can be confirmed by checking that 159 is the minimum integer that results in less than 5% probability of finding 0 or 1 misstatements if the population misstatement is truly 3%. sum(dpois(x = 0:1, lambda = 158 * 0.03)) &lt; 0.05 # 158: Not sufficient #&gt; [1] FALSE sum(dpois(x = 0:1, lambda = 159 * 0.03)) &lt; 0.05 # 159: Sufficient #&gt; [1] TRUE Like before, we can make this visually intuitive by showing the Poisson(\\(k\\) | 159 * 0.03) distribution and highlighting the probabilities for \\(k = 0\\) and \\(k = 1\\). The sum of these probabilities should be lower than the required sampling risk \\(\\alpha = 0.05\\). 3.4.2 Bayesian Planning Performing Bayesian planning with the Poisson likelihood requires that you specify a prior distribution for the parameter \\(\\theta\\). Practically, this means that you should provide an input for the prior argument in the planning() function. Setting prior = TRUE performs Bayesian planning using a default prior conjugate to the specified likelihood (i.e., a gamma prior). Concretely, this means that the following statistical model is assumed: \\[\\begin{align} k &amp;\\sim \\text{Poisson}(n\\theta) \\\\ \\theta &amp;\\sim \\text{Gamma}(\\alpha, \\beta) \\end{align}\\] The gamma prior distribution is conjugate to the Poisson likelihood (see this list of conjugate priors), which means that the posterior distribution of \\(\\theta\\) can be determined analytically. For example, if the prior distribution is gamma(\\(\\alpha\\), \\(\\beta\\)) and the auditor has observed a sample of \\(n\\) items containing \\(k\\) misstatements, the posterior distribution for \\(\\theta\\) is gamma(\\(\\alpha + k\\), \\(\\beta + n\\)). For example, the command below uses a default gamma(\\(\\alpha=1\\), \\(\\beta=1\\)) prior distribution to plan the sample, since planning() is given the Poisson likelihood. If we want to achieve an assurance level of 95% (\\(\\alpha=0.05\\)) for a performance materiality of \\(\\theta_{max} = 0.03\\), then the required sample size under the assumption of zero expected misstatements in the sample is \\(n = 99\\). plan &lt;- planning(materiality = 0.03, expected = 0, conf.level = 0.95, likelihood = &quot;poisson&quot;, prior = TRUE) summary(plan) #&gt; #&gt; Bayesian Audit Sample Planning Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Materiality: 0.03 #&gt; Hypotheses: H₀: Θ &gt; 0.03 vs. H₁: Θ &lt; 0.03 #&gt; Expected: 0 #&gt; Likelihood: poisson #&gt; Prior distribution: gamma(α = 1, β = 1) #&gt; #&gt; Results: #&gt; Minimum sample size: 99 #&gt; Tolerable errors: 0 #&gt; Posterior distribution: gamma(α = 1, β = 100) #&gt; Expected most likely error: 0 #&gt; Expected upper bound: 0.029957 #&gt; Expected precision: 0.029957 #&gt; Expected BF₁₀: 626.69 You can inspect how the prior distribution compares to the expected posterior distribution by using the plot() function. The expected posterior distribution is the posterior distribution that would occur if you actually observed the planned sample containing the expected misstatements. plot(plan) The input for the prior argument can also be an object created by the auditPrior function. If planning() receives a prior for which there is no conjugate likelihood available, it will numerically derive the posterior distribution. For example, the command below uses a Normal(0, 0.05) prior distribution to plan the sample using the Poisson likelihood. Concretely, this means that the following statistical model is assumed: \\[\\begin{align} k &amp;\\sim \\text{Poisson}(n\\theta) \\\\ \\theta &amp;\\sim \\text{Normal}(\\mu = 0, \\sigma = 0.05) \\end{align}\\] prior &lt;- auditPrior(method = &quot;param&quot;, likelihood = &quot;normal&quot;, alpha = 0, beta = 0.05) plan &lt;- planning(materiality = 0.03, expected = 0, conf.level = 0.95, likelihood = &quot;poisson&quot;, prior = prior) summary(plan) #&gt; #&gt; Bayesian Audit Sample Planning Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Materiality: 0.03 #&gt; Hypotheses: H₀: Θ &gt; 0.03 vs. H₁: Θ &lt; 0.03 #&gt; Expected: 0 #&gt; Likelihood: poisson #&gt; Prior distribution: normal(μ = 0, σ = 0.05)T[0,1] #&gt; #&gt; Results: #&gt; Minimum sample size: 91 #&gt; Tolerable errors: 0 #&gt; Posterior distribution: Determined via MCMC sampling #&gt; Expected most likely error: 0.0010232 #&gt; Expected upper bound: 0.029029 #&gt; Expected precision: 0.028006 #&gt; Expected BF₁₀: 19.296 The resulting sample size under this prior is \\(n = 91\\), a reduction of 8 samples when compared to the default gamma(1, 1) prior. plot(plan) "],["practical-examples.html", "3.5 Practical Examples", " 3.5 Practical Examples This section contains practical examples of how to construct a prior distribution based on audit information. 3.5.1 Audit Risk Model In this example, an auditor is performing tests of details on a population of the auditee. For instance, let’s say an auditor is performing an audit on a company’s accounts payable transactions. The company has a total of \\(N\\) = 1000 accounts payable transactions for the year. Rather than testing all 1000 transactions, the auditor can choose to test a sample of the transactions. The performance materiality for the payable transactions account is set to 3%. Based on the results of last years audit, where the estimate of the maximum misstatement was 1%, the auditor wants to tolerate 1% misstatements in the sample before giving an unqualified opinion on the population. ar &lt;- 0.05 # Audit risk materiality &lt;- 0.03 # Performance materiality expected &lt;- 0.01 # Tolerable deviation rate Before tests of details, the auditor has assessed risk of material misstatement via the audit risk model. In this example, the auditor has assessed the effectiveness of the company’s internal controls, such as its segregation of duties and its risk management processes, and has determined that they are sufficient to prevent or detect material misstatements. Because the internal control systems were effective, the auditor assesses the control risk as medium. The auditor’s firm defines the risk categories low, medium, and high respectively as 50%, 60%, and 100%. ir &lt;- 1 # Inherent risk cr &lt;- 0.6 # Control risk dr &lt;- ar / (ir * cr) # Detection risk By using the detection risk as the adjusted audit risk, the auditor can plan for a sample while taking into account the risk-reducing information from the assessments of inherent risk and control risk. The required minimum sample size is 174 in this case. planning(materiality = 0.03, expected = expected, conf.level = 1 - dr) #&gt; #&gt; Classical Audit Sample Planning #&gt; #&gt; minimum sample size = 174 #&gt; sample size obtained in 175 iterations via method &#39;poisson&#39; The auditor is free to apply a Bayesian philosophy in planning the sample. For example, the risk assessments from the ARM can be incorporated into a prior distribution. This can be done using method = \"arm\" in the auditPrior() function, which takes the values of the inherent risk probability ir and the control risk probability cr. Hence, the prior distribution in this example can be constructed using the following command: prior &lt;- auditPrior(method = &quot;arm&quot;, materiality = 0.03, expected = expected, ir = ir, cr = cr) summary(prior) #&gt; #&gt; Prior Distribution Summary #&gt; #&gt; Options: #&gt; Likelihood: poisson #&gt; Specifics: ir = 1; cr = 0.6; dr = 0.0833333 #&gt; #&gt; Results: #&gt; Functional form: gamma(α = 1.46, β = 46) #&gt; Mode: 0.01 #&gt; Mean: 0.031739 #&gt; Median: 0.024859 #&gt; Variance: 0.00069 #&gt; Skewness: 1.6552 #&gt; Information entropy (nat): -2.4894 #&gt; 95 percent upper bound: 0.08343 #&gt; Precision: 0.07343 The prior distribution can be visualized using the plot() function. plot(prior) By using the prior distribution to incorporate the assessments of the inherent risk and the control risk, the auditor can plan a sample while taking into account the risk-reducing information. The required minimum sample size is also 174 in this case. planning(materiality = 0.03, expected = expected, conf.level = 1 - ar, prior = prior) #&gt; #&gt; Bayesian Audit Sample Planning #&gt; #&gt; minimum sample size = 174 #&gt; sample size obtained in 175 iterations via method &#39;poisson&#39; + &#39;prior&#39; 3.5.2 Benchmark Analysis The auditor may incorporate information obtained through analytical procedures (Derks, Swart, Batenburg, et al. 2021), such as a benchmark analysis, into the prior distribution for \\(\\theta\\). While we have previously discussed methods for constructing a prior distribution based on existing knowledge, there is no set procedure for incorporating information obtained through analytical procedures, as these procedures can vary significantly depending on the type of information being incorporated into the prior distribution. Therefore, it is important to thoroughly substantiate the data and assumptions used in this approach and to carefully consider how these assumptions are incorporated into the prior distribution. One way to construct a prior distribution on the basis of data is through the use of regression models, such as benchmarking the relationship between sales and costs of sales within the auditee’s specific industry sector. The jfa package includes a data set benchmark that can be used for this example. data(benchmark) head(benchmark) #&gt; sales costofsales #&gt; 1 186273256 140755372 #&gt; 2 336491541 248675452 #&gt; 3 222693077 164299866 #&gt; 4 364905221 285768790 #&gt; 5 382140185 280187371 #&gt; 6 113666950 101552955 The auditee’s the sum of the sales is $298,112,312 and the sum of the booked costs of sales is $223,994,405, respectively. This is indicated by a blue dot in the figure below, which visualizes the industry sales versus the cost of sales. The relationship between the sales \\(S\\) and the cost of sales \\(C\\) can be modelled by a linear equation: \\[\\begin{equation} C = \\beta_0 + \\beta_1 \\cdot S + \\epsilon \\end{equation}\\] In practice, this relationship is often more complex than is presented above, and the auditor must carefully construct and evaluate the applied regression model. However, for ease of understanding we will continue our example with this simplified model. The auditor can estimate the regression model using the following command: fit &lt;- lm(costofsales ~ 1 + sales, data = benchmark) summary(fit) #&gt; #&gt; Call: #&gt; lm(formula = costofsales ~ 1 + sales, data = benchmark) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -25736696 -7052141 -226945 6857840 25498106 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 2.413e+05 3.455e+06 0.07 0.944 #&gt; sales 7.366e-01 1.310e-02 56.21 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 11150000 on 98 degrees of freedom #&gt; Multiple R-squared: 0.9699, Adjusted R-squared: 0.9696 #&gt; F-statistic: 3160 on 1 and 98 DF, p-value: &lt; 2.2e-16 The predicted cost of sales for the auditee, based on the industry benchmark, can be computed as follows: C_hat &lt;- predict(fit, newdata = data.frame(sales = 298112312), interval = &quot;prediction&quot;, level = 0.90)[1] C_hat #&gt; [1] 219817866 The fitted regression line and the predicted cost of sales (red dot) are visualized in the figure below: The prior distribution can be justified by the data and the auditee’s numerical prediction of the cost of sales. In this analytical procedure, the prior distribution on \\(\\theta\\) can utilize the relative error distribution from the linear regression. This relative error distribution, which is a Normal(\\(\\mu\\), \\(\\sigma\\)) distribution, captures the uncertainty of the prediction of the cost of sales through the use of linear regression, scaled to be a percentage of the total cost of sales. The mean \\(\\mu\\) of the prior distribution is determined by the relative deviation of the auditee’s booked cost of sales when compared to the predicted cost of sales according to the benchmark data \\(\\frac{C - \\hat{C}}{C}\\). mu &lt;- (223994405 - C_hat[1]) / 223994405 mu #&gt; [1] 0.01864573 The standard deviation of the prior distribution is expressed through the standard deviation of the distribution of \\(\\epsilon\\). stdev &lt;- sd(fit$residuals) / 223994405 stdev #&gt; [1] 0.04951199 The prior distribution can be constructed through a call to auditPrior(): prior &lt;- auditPrior(method = &quot;param&quot;, likelihood = &quot;normal&quot;, alpha = mu, beta = stdev) summary(prior) #&gt; #&gt; Prior Distribution Summary #&gt; #&gt; Options: #&gt; Likelihood: normal #&gt; Specifics: α = 0.0186457; β = 0.049512 #&gt; #&gt; Results: #&gt; Functional form: normal(μ = 0.019, σ = 0.05)T[0,1] #&gt; Mode: 0.018646 #&gt; Mean: 0.047096 #&gt; Median: 0.041335 #&gt; Variance: 0.0011116 #&gt; Skewness: NA #&gt; Information entropy (nat): -2.1306 #&gt; 95 percent upper bound: 0.11012 #&gt; Precision: 0.091473 The prior distribution can be visualized using the plot() function. plot(prior) By using this prior distribution, the required minimum sample size is 50. plan &lt;- planning(materiality = 0.05, conf.level = 0.95, likelihood = &quot;binomial&quot;, prior = prior) plan #&gt; #&gt; Bayesian Audit Sample Planning #&gt; #&gt; minimum sample size = 50 #&gt; sample size obtained in 51 iterations via method &#39;binomial&#39; + &#39;prior&#39; You can inspect how the prior distribution compares to the expected posterior distribution by using the plot() function. plot(plan) References "],["CHAPTER-4.html", "Chapter 4 Selecting a Sample", " Chapter 4 Selecting a Sample This chapter outlines the most commonly used sampling methodology for auditing and shows how to select a sample using these methods with the jfa package. Auditors are often required to assess balances or processes that involve a large number of items. Since they cannot inspect all of these items individually, they need to select a subset (i.e., a sample) from the total population to make a statement about a certain characteristic of the population. For this purpose, various selection methodologies are available that have become standard in an audit context. "],["sampling-units.html", "4.1 Sampling Units", " 4.1 Sampling Units Selecting a subset from the population requires knowledge of the sampling units; physical representations of the population that needs to be audited. Generally, the auditor has to choose between two types of sampling units: individual items in the population or individual monetary units in the population. In order to perform statistical selection, the population must be divided into individual sampling units that can be assigned a probability to be included in the sample. The total collection of all sampling units which have been assigned a selection probability is called the sampling frame. 4.1.1 Items A sampling unit for record (i.e., attributes) sampling is generally a characteristic of an item in the population. For example, suppose that you inspect a population of receipts. A possible sampling unit for record sampling can be the date of payment of the receipt. When a sampling unit (e.g., date of payment) is selected by the sampling method, the population item that corresponds to the sampled unit is included in the sample. 4.1.2 Monetary Units A sampling unit for monetary unit sampling is different than a sampling unit for record sampling in that it is an individual monetary unit within an item or transaction, like an individual dollar. For example, a single sampling unit can be the 10\\(^{th}\\) dollar from a specific receipt in the population. When a sampling unit (e.g., individual dollar) is selected by the sampling method, the population item that includes the sampling unit is included in the sample. "],["sampling-methods.html", "4.2 Sampling Methods", " 4.2 Sampling Methods This section discusses the four sampling methods implemented in jfa. First, for notation, let the the population \\(N\\) be defined as the total set of individual sampling units \\(x_i\\). \\[N = \\{x_1, x_2, \\dots, x_N\\}.\\] In statistical sampling, every sampling unit \\(x_i\\) in the population must receive a selection probability \\(p(x_i)\\). The purpose of the sampling method is to provide a framework to assign selection probabilities to each of the sampling units, and subsequently draw sampling units from the population until a set of size \\(n\\) has been created. The next section discusses which sampling methods are available in jfa. To illustrate the outcomes for different sampling methods, we will use the BuildIt data set that can be loaded using the code below. data(BuildIt) 4.2.1 Fixed Interval Sampling Fixed interval sampling is a method designed for yielding representative samples from monetary populations. The algorithm determines a uniform interval on the (optionally ranked) sampling units. Next, a starting point is handpicked or randomly selected in the first interval and a sampling unit is selected throughout the population at each of the uniform intervals from the starting point. For example, if the interval has a width of 10 sampling units and sampling unit number 5 is chosen as the starting point, the sampling units 5, 15, 25, etc. are selected to be included in the sample. The number of required intervals \\(I\\) can be determined by dividing the number of sampling units in the population by the required sample size: \\[I = \\frac{N}{n},\\] in which \\(n\\) is the required sample size and \\(N\\) is the total number of sampling units in the population. If the space between the selected sampling units is equal, the selection probability for each sampling unit is theoretically defined as: \\[p(x) = \\frac{1}{I},\\] with the property that the space between selected units \\(i\\) is the same as the interval \\(I\\), see Figure 1. However, in practice the selection is deterministic and completely depends on the chosen starting points (using start). Figure 4.1: Illustration of fixed interval sampling The fixed interval method yields a sample that allows every sampling unit in the population an equal chance of being selected. However, the fixed interval method has the property that all items in the population with a monetary value larger than the interval \\(I\\) have an selection probability of one because one of these items’ sampling units are always selected from the interval. Note that, if the population is arranged randomly with respect to its deviation pattern, fixed interval sampling is equivalent to random selection. Advantage(s): The advantage of the fixed interval sampling method is that it is often simple to understand and fast to perform. Another advantage is that, in monetary unit sampling, all items that are greater than the calculated interval will be included in the sample. In record sampling, since units can be ranked on the basis of value, there is also a guarantee that some large items will be in the sample. Disadvantage(s): A pattern in the population can coincide with the selected interval, rendering the sample less representative. What is sometimes seen as an added complication for this method is that the sample is hard to extend after drawing the initial sample. This is due to the chance of selecting the same sampling unit. However, by removing the already selected sampling units from the population and redrawing the intervals this problem can be efficiently solved. As an example, the code below shows how to apply the fixed interval sampling method in a record sampling and a monetary unit sampling setting. Note that, by default, the first sampling unit from each interval is selected. However, this can be changed by setting the argument start = 1 to a different value. # Record sampling sample &lt;- selection(data = BuildIt, size = 100, units = &quot;items&quot;, method = &quot;interval&quot;, start = 1) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 1 1 82884 242.61 242.61 #&gt; 2 36 1 80125 118.58 118.58 #&gt; 3 71 1 27566 481.44 481.44 #&gt; 4 106 1 88261 266.66 266.66 #&gt; 5 141 1 58999 568.60 568.60 #&gt; 6 176 1 27801 314.65 314.65 # Monetary unit sampling sample &lt;- selection(data = BuildIt, size = 100, units = &quot;values&quot;, method = &quot;interval&quot;, values = &quot;bookValue&quot;, start = 1) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 1 1 82884 242.61 242.61 #&gt; 2 38 1 57172 329.30 329.30 #&gt; 3 73 1 90160 205.69 205.69 #&gt; 4 110 1 4756 295.96 295.96 #&gt; 5 146 1 90183 333.28 333.28 #&gt; 6 183 1 96080 449.07 449.07 4.2.2 Cell Sampling The cell sampling method divides the (optionally ranked) population into a set of intervals \\(I\\) that are computed through the previously given equations. Within each interval, a sampling unit is selected by randomly drawing a number between 1 and the interval range \\(I\\). This causes the space \\(i\\) between the sampling units to vary. Like in the fixed interval sampling method, the selection probability for each sampling unit is defined as: \\[p(x) = \\frac{1}{I}.\\] Figure 4.2: Illustration of cell sampling The cell sampling method has the property that all items in the population with a monetary value larger than twice the interval \\(I\\) have a selection probability of one. Advantage(s): More sets of samples are possible than in fixed interval sampling, as there is no systematic interval \\(i\\) to determine the selections. It is argued that the cell sampling algorithm offers a solution to the pattern problem in fixed interval sampling. Disadvantage(s): A disadvantage of this sampling method is that not all items in the population with a monetary value larger than the interval have a selection probability of one. Besides, population items can be in two adjacent cells, thereby creating the possibility that an items is included in the sample twice. As an example, the code below shows how to apply the cell sampling method in a record sampling and a monetary unit sampling setting. It is important to set a seed to make the results reproducible. # Record sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;items&quot;, method = &quot;cell&quot;) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 9 1 14608 216.48 216.48 #&gt; 2 48 1 45437 347.94 139.18 #&gt; 3 90 1 90333 241.17 241.17 #&gt; 4 136 1 45746 440.72 440.72 #&gt; 5 147 1 72906 677.62 677.62 #&gt; 6 206 1 93529 528.79 528.79 # Monetary unit sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;values&quot;, method = &quot;cell&quot;, values = &quot;bookValue&quot;) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 8 1 81460 295.20 295.20 #&gt; 2 53 1 80645 677.88 677.88 #&gt; 3 92 1 75133 355.16 355.16 #&gt; 4 142 1 68676 612.46 612.46 #&gt; 5 153 1 63777 552.83 552.83 #&gt; 6 214 1 25379 1021.07 1021.07 4.2.3 Random Sampling Random sampling is the most simple and straight-forward selection method The random sampling method provides a method that allows every sampling unit in the population an equal chance of being selected, meaning that every combination of sampling units has the same probability of being selected as every other combination of the same number of sampling units. Simply put, the algorithm draws a random selection of size \\(n\\) of the sampling units. Therefore, the selection probability for each sampling unit is defined as: \\[p(x) = \\frac{1}{N},\\] where \\(N\\) is the number of units in the population. To clarify this procedure, Figure 3 provides an illustration of the random sampling method. Figure 4.3: Illustration of random sampling Advantage(s): The random sampling method yields an optimal random selection, with the additional advantage that the sample can be easily extended by applying the same method again. Disadvantages: Because the selection probabilities are equal for all sampling units there is no guarantee that items with a large monetary value in the population will be included in the sample. As an example, the code below shows how to apply the random sampling (with our without replacement using replace) method in a record sampling and a monetary unit sampling setting. It is important to set a seed to make results reproducible. # Record sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;items&quot;, method = &quot;random&quot;) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 1017 1 50755 618.24 618.24 #&gt; 2 679 1 20237 669.75 669.75 #&gt; 3 2177 1 9517 454.02 454.02 #&gt; 4 930 1 85674 257.82 257.82 #&gt; 5 1533 1 31051 308.53 308.53 #&gt; 6 471 1 84375 824.66 824.66 # Monetary unit sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;values&quot;, method = &quot;random&quot;, values = &quot;bookValue&quot;) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 2174 1 90260 625.98 625.98 #&gt; 2 2928 1 68595 548.21 548.21 #&gt; 3 1627 1 98301 429.07 429.07 #&gt; 4 700 1 29683 239.26 239.26 #&gt; 5 147 1 72906 677.62 677.62 #&gt; 6 3056 1 86317 246.22 246.22 4.2.4 Modified Sieve Sampling The fourth option for the sampling method is modified sieve sampling (Hoogduin, Hall, &amp; Tsay, 2010). The algorithm starts by selecting a standard uniform random number \\(R_i\\) between 0 and 1 for each item in the population. Next, the sieve ratio: \\[S_i = \\frac{Y_i}{R_i}\\] is computed for each item by dividing the book value of that item by the random number. Lastly, the items in the population are sorted by their sieve ratio \\(S\\) (in decreasing order) and the top \\(n\\) items are selected for inspection. In contrast to the classical sieve sampling method (Rietveld, 1978), the modified sieve sampling method provides precise control over sample sizes. As an example, the code below shows how to apply the modified sieve sampling method in a monetary unit sampling setting. It is important to set a seed to make results reproducible. # Monetary unit sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;values&quot;, method = &quot;sieve&quot;, values = &quot;bookValue&quot;) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 2329 1 29919 681.10 681.10 #&gt; 2 2883 1 59402 279.29 279.29 #&gt; 3 1949 1 56012 581.22 581.22 #&gt; 4 3065 1 47482 621.73 621.73 #&gt; 5 1072 1 79901 789.97 789.97 #&gt; 6 488 1 50811 651.35 651.35 "],["ordering-or-randomizing-the-population.html", "4.3 Ordering or Randomizing the Population", " 4.3 Ordering or Randomizing the Population The selection() function has additional arguments (order, decreasing, and randomize) to preprocess your population before selection. The order argument takes as input a column name in data which determines the order of the population. For example, you can order the population from lowest book value to highest book value before engaging in selection. In this case, you should use the decreasing = FALSE argument. # Ordering population from lowest &#39;bookValue&#39; to highest &#39;bookValue&#39; before MUS set.seed(1) sample &lt;- selection( data = BuildIt, size = 100, units = &quot;values&quot;, values = &quot;bookValue&quot;, order = &quot;bookValue&quot;, decreasing = FALSE ) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 2662 1 30568 14.47 14.47 #&gt; 2 2923 1 63567 125.21 125.21 #&gt; 3 2542 1 95807 153.56 153.56 #&gt; 4 101 1 64282 172.65 172.65 #&gt; 5 838 1 43352 188.72 188.72 #&gt; 6 302 1 94296 198.59 198.59 The randomize argument can be used to randomly shuffle the items in the population before selection. # Randomly shuffle population items before MUS set.seed(1) sample &lt;- selection( data = BuildIt, size = 100, units = &quot;values&quot;, values = &quot;bookValue&quot;, randomize = TRUE ) head(sample$sample, n = 6) #&gt; row times ID bookValue auditValue #&gt; 1 1017 1 50755 618.24 618.24 #&gt; 2 2159 1 3653 492.39 492.39 #&gt; 3 1639 1 39570 307.54 307.54 #&gt; 4 2698 1 225 507.18 507.18 #&gt; 5 355 1 27934 749.38 749.38 #&gt; 6 1242 1 64071 759.34 759.34 "],["CHAPTER-5.html", "Chapter 5 Evaluating a Sample", " Chapter 5 Evaluating a Sample A non-stratified audit sample does not involve dividing the population into subgroups. Here, the auditor selects a random sample from the entire population without considering any specific characteristics of the population. For example, in an audit of a company’s inventory, the auditor may simply select a random sample of items from the entire inventory without dividing it into subgroups based on characteristics such as location or type of item. Another example of such a situation would be where the auditor is auditing the general ledger of a small business. Naturally, non-stratified sampling is simpler than stratified sampling and can be used when the population is considered homogenous or the auditor does not need to consider differences between subgroups (e.g., strata). "],["classical-evaluation.html", "5.1 Classical Evaluation", " 5.1 Classical Evaluation Classical hypothesis testing uses the p-value to make a decision about whether to reject the hypothesis \\(H_0\\) or not. As an example, consider that an auditor wants to verify whether the population contains less than 5 percent misstatement, implying the hypotheses \\(H_1:\\theta&lt;0.05\\) and \\(H_0:\\theta\\geq0.05\\). They have taken a sample of 100 items, of which 1 contained an error. They set the significance level for the p-value to 0.05, implying that \\(p &lt; 0.05\\) will be enough to reject the hypothesis \\(H_0\\). The call below evaluates the sample using a classical non-stratified evaluation procedure. evaluation(materiality = 0.05, x = 1, n = 100) #&gt; #&gt; Classical Audit Sample Evaluation #&gt; #&gt; data: 1 and 100 #&gt; number of errors = 1, number of samples = 100, taint = 1, p-value = #&gt; 0.040428 #&gt; alternative hypothesis: true misstatement rate is less than 0.05 #&gt; 95 percent confidence interval: #&gt; 0.00000000 0.04743865 #&gt; most likely estimate: #&gt; 0.01 #&gt; results obtained via method &#39;poisson&#39; The output shows that the most likely error in the population is estimated to be 1 / 100 = 1% and that the 95% (one-sided) confidence interval ranges from 0% to 4.74%. The output also shows that the p-value is lower than 0.05 implying that the hypothesis \\(H_0\\) can be rejected. Hence, the auditor is able to conclude that the sample provides sufficient evidence to state with reasonable assurance that the population does not contain material misstatement. "],["bayesian-evaluation.html", "5.2 Bayesian Evaluation", " 5.2 Bayesian Evaluation Bayesian hypothesis testing uses the Bayes factor, \\(BF_{10}\\) or \\(BF_{01}\\), to make a statement about the evidence provided by the sample in support for one of the two hypotheses \\(H_1\\) or \\(H_0\\). As an example of how to interpret the Bayes factor, the value of \\(BF_{10} = 10\\) (provided by the evaluation() function) can be interpreted as: the data are 10 times more likely to have occurred underthe hypothesis \\(H_1\\) than under the hypothesis \\(H_0\\). \\(BF_{10} &gt; 1\\) indicates evidence in favor of \\(H_1\\) and against \\(H_0\\), while \\(BF_{10} &lt; 1\\) indicates evidence in favor of \\(H_0\\) and against \\(H_1\\). The evaluation() function returns the value for \\(BF_{10}\\), but \\(BF_{01}\\) can be computed as \\(\\frac{1}{BF_{10}}\\). Consider the previous example of an auditor who wants to verify whether the population contains less than 5 percent misstatement, implying the hypotheses \\(H_1:\\theta&lt;0.05\\) and \\(H_0:\\theta\\geq0.05\\). They have taken a sample of 100 items, of which 1 was found to contain a misstatement. The prior distribution is assumed to be a default beta(1,1) prior. The call below evaluates the sample using a Bayesian non-stratified evaluation procedure. prior &lt;- auditPrior(materiality = 0.05, method = &quot;default&quot;, likelihood = &quot;binomial&quot;) evaluation(materiality = 0.05, x = 1, n = 100, prior = prior) #&gt; #&gt; Bayesian Audit Sample Evaluation #&gt; #&gt; data: 1 and 100 #&gt; number of errors = 1, number of samples = 100, taint = 1, BF₁₀ = #&gt; 515.86 #&gt; alternative hypothesis: true misstatement rate is less than 0.05 #&gt; 95 percent credible interval: #&gt; 0.00000000 0.04610735 #&gt; most likely estimate: #&gt; 0.01 #&gt; results obtained via method &#39;binomial&#39; + &#39;prior&#39; The output shows that the most likely error in the population is estimated to be 1 / 100 = 1% and that the 95% (one-sided) credible interval ranges from 0% to 4.61%. The small difference between the classical and default Bayesian results is due to the prior distribution, which must be proper in order to calculate a Bayes factor (classical results can be emulated by constructing a prior with method = \"strict\" in the auditPrior() function). The Bayes factor in this case is shown to be \\(BF_{10}=515\\), meaning that the data from the sample are about 515 times more likely to occur under the hypothesis of tolerable misstatement than under the hypothesis of material misstatement. Note that this is a very high Bayes factor for the little data that is observed. That is because the Bayes factor is dependent on the prior distribution for \\(\\theta\\). As a rule of thumb, when the prior distribution is highly conservative (as with method = 'default') with respect to the hypothesis of tolerable misstatement, the Bayes factor tends to over quantify the evidence in favor of this hypothesis. You can mitigate this dependency by using a prior distribution that is impartial with respect to the hypotheses via method = \"impartial\" in the auditPrior() function (Derks et al., 2022). prior &lt;- auditPrior(materiality = 0.05, method = &quot;impartial&quot;, likelihood = &quot;binomial&quot;) evaluation(materiality = 0.05, x = 1, n = 100, prior = prior) #&gt; #&gt; Bayesian Audit Sample Evaluation #&gt; #&gt; data: 1 and 100 #&gt; number of errors = 1, number of samples = 100, taint = 1, BF₁₀ = #&gt; 47.435 #&gt; alternative hypothesis: true misstatement rate is less than 0.05 #&gt; 95 percent credible interval: #&gt; 0.00000000 0.04110834 #&gt; most likely estimate: #&gt; 0.0088878 #&gt; results obtained via method &#39;binomial&#39; + &#39;prior&#39; The output shows that \\(BF_{10}=47\\), implying that under the assumption of impartiality there is strong evidence for \\(H_1\\), the hypothesis that the population contains misstatements lower than 5 percent of the population (tolerable misstatement). Since the two prior distributions both resulted in convincing Bayes factors, the results can be considered robust to the choice of prior distribution. Hence, the auditor is able to conclude that the sample provides convincing evidence to state that the population does not contain material misstatement. "],["evaluation-using-data.html", "5.3 Evaluation using Data", " 5.3 Evaluation using Data For this example, we take the allowances that set that comes with the package. This data set contains 3500 financial statement line items, each with a booked value bookValue and, for illustrative purposes, and audited (true) value auditValue. Since the focus of this vignette is the evaluation stage in the audit, the sample is already indicated in the data set. The performance materiality in this example is set to 5%. data(allowances) head(allowances) #&gt; item branch bookValue auditValue times #&gt; 1 1 12 1600 1600 1 #&gt; 2 2 12 1625 NA 0 #&gt; 3 3 12 1775 NA 0 #&gt; 4 4 12 1250 1250 1 #&gt; 5 5 12 1400 NA 0 #&gt; 6 6 12 1190 NA 0 Evaluating a non-stratified sample using data requires specification of the data, values and values.audit arguments. The input for these arguments is the name of the specific column in data. 5.3.1 Classical Evaluation The call below evaluates the allowances sample using a classical non-stratified evaluation procedure. x &lt;- evaluation( materiality = 0.05, data = allowances, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot;, times = &quot;times&quot; ) summary(x) #&gt; #&gt; Classical Audit Sample Evaluation Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Materiality: 0.05 #&gt; Hypotheses: H₀: Θ &gt;= 0.05 vs. H₁: Θ &lt; 0.05 #&gt; Method: poisson #&gt; #&gt; Data: #&gt; Sample size: 1604 #&gt; Number of errors: 401 #&gt; Sum of taints: 252.9281046 #&gt; #&gt; Results: #&gt; Most likely error: 0.15769 #&gt; 95 percent confidence interval: [0, 0.175] #&gt; Precision: 0.017311 #&gt; p-value: 1 In this case, the output shows that the estimate of the misstatement in the population is 15.77%, with the 95% (one-sided) confidence interval ranging from 0% to 17.5%. 5.3.2 Bayesian evaluation The call below evaluates the allowances sample using a Bayesian non-stratified evaluation procedure. x &lt;- evaluation( materiality = 0.05, data = allowances, prior = TRUE, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot;, times = &quot;times&quot; ) summary(x) #&gt; #&gt; Bayesian Audit Sample Evaluation Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Materiality: 0.05 #&gt; Hypotheses: H₀: Θ &gt; 0.05 vs. H₁: Θ &lt; 0.05 #&gt; Method: poisson #&gt; Prior distribution: gamma(α = 1, β = 1) #&gt; #&gt; Data: #&gt; Sample size: 1604 #&gt; Number of errors: 401 #&gt; Sum of taints: 252.9281046 #&gt; #&gt; Results: #&gt; Posterior distribution: gamma(α = 253.928, β = 1605) #&gt; Most likely error: 0.15759 #&gt; 95 percent credible interval: [0, 0.17489] #&gt; Precision: 0.0173 #&gt; BF₁₀: 0 The output shows that the estimate of the misstatement in the population is 15.76%, with the 95% (one-sided) credible interval ranging from 0% to 17.49%. "],["CHAPTER-6.html", "Chapter 6 Evaluating a Stratified Sample", " Chapter 6 Evaluating a Stratified Sample In an audit context, stratified sampling can be used to select a sample of transactions from different departments, locations, or business units to ensure that the sample is representative of the population. For example, if you want to audit the expense claims of a large organization, you can stratify the population based on the department, location, or business unit to ensure that all departments are represented accordingly in the sample. Another example of such a situation would be a group audit where the audited organization consists of different components or branches. Stratification is relevant for the group auditor if they must form an opinion on the group as a whole because they must aggregate the samples taken by the component auditors. As a data example, consider the retailer data set that comes with the package. The organization in question consists of 20 branches across the country. In each of the 20 strata, a component auditor has taken a statistical sample and reported the outcomes to the group auditor. data(retailer) head(retailer) #&gt; stratum items samples errors #&gt; 1 1 5000 300 21 #&gt; 2 2 5000 300 16 #&gt; 3 3 5000 300 15 #&gt; 4 4 5000 300 14 #&gt; 5 5 5000 300 16 #&gt; 6 6 5000 150 5 In general, there are three approaches to evaluating a stratified sample: no pooling, complete pooling, and partial pooling (see Derks et al., 2022). When using evaluation(), you must to indicate which type of pooling to use via the pooling argument. No pooling assumes no similarities between strata, which means that all strata are analyzed independently. Complete pooling assumes no difference between strata, which means that all data is aggregated and analyzed as a whole. Finally, partial pooling assumes differences and similarities between strata, which means that information can be shared between strata. Partial pooling (i.e., multilevel/hierarchical modeling) is a powerful technique that can result in more efficient population and stratum estimates but is currently only feasible when performing a Bayesian analysis. For this reason, this vignette only describes the Bayesian approach to stratified evaluation but going from this approach to a classical approach only requires setting prior = FALSE. The number of units per stratum in the population can be provided with N.units to weigh the stratum estimates to determine population estimate. This is called poststratification. If N.units is not specified, each stratum is assumed to be equally represented in the population. "],["no-pooling.html", "6.1 No pooling", " 6.1 No pooling No pooling (pooling = \"none\", default) assumes no similarities between strata. This means that the prior distribution specified through prior is applied independently for each stratum. This allows for independent estimates for the misstatement in each stratum but also results in a relatively high uncertainty in the population estimate. The call below evaluates the sample using a Bayesian stratified evaluation procedure, in which the stratum estimates are poststratified to arrive at the population estimate. set.seed(1) # Important because the posterior distribution is determined via sampling result_np &lt;- evaluation( materiality = 0.05, method = &quot;binomial&quot;, prior = TRUE, n = retailer$samples, x = retailer$errors, N.units = retailer$items, alternative = &quot;two.sided&quot;, pooling = &quot;none&quot; ) summary(result_np) #&gt; #&gt; Bayesian Audit Sample Evaluation Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Population size: 144000 #&gt; Materiality: 0.05 #&gt; Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 #&gt; Method: binomial #&gt; Prior distribution: Determined via MCMC sampling #&gt; #&gt; Data: #&gt; Sample size: 2575 #&gt; Number of errors: 115 #&gt; Sum of taints: 115 #&gt; #&gt; Results: #&gt; Posterior distribution: Determined via MCMC sampling #&gt; Most likely error: 0.058487 #&gt; 95 percent credible interval: [0.042763, 0.082201] #&gt; Precision: 0.023714 #&gt; BF₁₀: 0 #&gt; #&gt; Strata (20): #&gt; N n x t mle lb ub precision #&gt; 1 5000 300 21 21 0.07000 0.04637 0.10467 0.03467 #&gt; 2 5000 300 16 16 0.05333 0.03324 0.08489 0.03156 #&gt; 3 5000 300 15 15 0.05000 0.03069 0.08086 0.03086 #&gt; 4 5000 300 14 14 0.04667 0.02816 0.07681 0.03014 #&gt; 5 5000 300 16 16 0.05333 0.03324 0.08489 0.03156 #&gt; 6 5000 150 5 5 0.03333 0.01472 0.07558 0.04225 #&gt; 7 5000 150 4 4 0.02667 0.01084 0.06643 0.03977 #&gt; 8 5000 150 3 3 0.02000 0.00726 0.05696 0.03696 #&gt; 9 5000 150 4 4 0.02667 0.01084 0.06643 0.03977 #&gt; 10 5000 150 5 5 0.03333 0.01472 0.07558 0.04225 #&gt; 11 10000 50 2 2 0.04000 0.01230 0.13459 0.09459 #&gt; 12 10000 50 3 3 0.06000 0.02178 0.16242 0.10242 #&gt; 13 10000 50 2 2 0.04000 0.01230 0.13459 0.09459 #&gt; 14 10000 50 1 1 0.02000 0.00478 0.10447 0.08447 #&gt; 15 10000 50 0 0 0.00000 0.00050 0.06978 0.06978 #&gt; 16 10000 15 0 0 0.00000 0.00158 0.20591 0.20591 #&gt; 17 10000 15 0 0 0.00000 0.00158 0.20591 0.20591 #&gt; 18 10000 15 0 0 0.00000 0.00158 0.20591 0.20591 #&gt; 19 10000 15 1 1 0.06667 0.01551 0.30232 0.23565 #&gt; 20 4000 15 3 3 0.20000 0.07266 0.45646 0.25646 In this case, the output of the summary() function shows that the estimate of the misstatement in the population is 5.85%, with the 95% credible interval ranging from 4.28% to 8.22%. The stratum estimates differ substantially from each other but are relatively uncertain. plot(result_np, type = &quot;estimates&quot;) The prior and posterior distribution for the population misstatement can be requested via the plot() function. plot(result_np, type = &quot;posterior&quot;) "],["complete-pooling.html", "6.2 Complete pooling", " 6.2 Complete pooling Complete pooling (pooling = \"complete\") assumes no differences between strata. This has the advantages that data from all strata can be aggregated, which decreases the uncertainty in the population estimate compared to the no pooling approach. However, the disadvantage of this approach is that it does not facilitate the distinction between between strata, as every stratum receives the same estimate equal to that of the population. The call below evaluates the sample using a Bayesian stratified evaluation procedure, in which the strata are assumed to be the same. result_cp &lt;- evaluation( materiality = 0.05, method = &quot;binomial&quot;, prior = TRUE, n = retailer$samples, x = retailer$errors, N.units = retailer$items, alternative = &quot;two.sided&quot;, pooling = &quot;complete&quot; ) summary(result_cp) #&gt; #&gt; Bayesian Audit Sample Evaluation Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Population size: 144000 #&gt; Materiality: 0.05 #&gt; Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 #&gt; Method: binomial #&gt; Prior distribution: beta(α = 1, β = 1) #&gt; #&gt; Data: #&gt; Sample size: 2575 #&gt; Number of errors: 115 #&gt; Sum of taints: 115 #&gt; #&gt; Results: #&gt; Posterior distribution: beta(α = 116, β = 2461) #&gt; Most likely error: 0.04466 #&gt; 95 percent credible interval: [0.03735, 0.053345] #&gt; Precision: 0.0086852 #&gt; BF₁₀: 0.022725 #&gt; #&gt; Strata (20): #&gt; N n x t mle lb ub precision bf10 #&gt; 1 5000 300 21 21 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 2 5000 300 16 16 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 3 5000 300 15 15 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 4 5000 300 14 14 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 5 5000 300 16 16 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 6 5000 150 5 5 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 7 5000 150 4 4 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 8 5000 150 3 3 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 9 5000 150 4 4 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 10 5000 150 5 5 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 11 10000 50 2 2 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 12 10000 50 3 3 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 13 10000 50 2 2 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 14 10000 50 1 1 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 15 10000 50 0 0 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 16 10000 15 0 0 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 17 10000 15 0 0 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 18 10000 15 0 0 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 19 10000 15 1 1 0.04466 0.03735 0.05335 0.00869 0.02273 #&gt; 20 4000 15 3 3 0.04466 0.03735 0.05335 0.00869 0.02273 For example, the output of the summary() function shows that the estimate of the misstatement in the population is 4.47%, with the 95% credible interval ranging from 3.74% to 5.33%. Since the data is aggregated, the stratum estimates contain relatively little uncertainty. However, the probability of misstatement in stratum 20 (many misstatements) under this assumption is the same as that of stratum 15 (few misstatements). plot(result_cp, type = &quot;estimates&quot;) The prior and posterior distribution for the population misstatement can be requested via the plot() function. plot(result_cp, type = &quot;posterior&quot;) "],["partial-pooling.html", "6.3 Partial pooling", " 6.3 Partial pooling Finally, partial pooling (pooling = \"partial\") assumes differences and similarities between strata. This allows the auditor to differentiate between strata, while also sharing information between the strata to reduce uncertainty in the population estimate. The call below evaluates the sample using a Bayesian stratified evaluation procedure, in which the stratum estimates are poststratified to arrive at the population estimate. set.seed(1) # Important because the posterior distribution is determined via sampling result_pp &lt;- evaluation( materiality = 0.05, method = &quot;binomial&quot;, prior = TRUE, n = retailer$samples, x = retailer$errors, N.units = retailer$items, alternative = &quot;two.sided&quot;, pooling = &quot;partial&quot; ) summary(result_pp) #&gt; #&gt; Bayesian Audit Sample Evaluation Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Population size: 144000 #&gt; Materiality: 0.05 #&gt; Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 #&gt; Method: binomial #&gt; Prior distribution: Determined via MCMC sampling #&gt; #&gt; Data: #&gt; Sample size: 2575 #&gt; Number of errors: 115 #&gt; Sum of taints: 115 #&gt; #&gt; Results: #&gt; Posterior distribution: Determined via MCMC sampling #&gt; Most likely error: 0.043714 #&gt; 95 percent credible interval: [0.034206, 0.053522] #&gt; Precision: 0.0098086 #&gt; BF₁₀: 0.019031 #&gt; #&gt; Strata (20): #&gt; N n x t mle lb ub precision #&gt; 1 5000 300 21 21 0.04809 0.03814 0.08017 0.03207 #&gt; 2 5000 300 16 16 0.04569 0.03328 0.06816 0.02247 #&gt; 3 5000 300 15 15 0.04497 0.03207 0.06407 0.01909 #&gt; 4 5000 300 14 14 0.04433 0.03043 0.06220 0.01787 #&gt; 5 5000 300 16 16 0.04620 0.03281 0.06708 0.02088 #&gt; 6 5000 150 5 5 0.04348 0.02367 0.05968 0.01620 #&gt; 7 5000 150 4 4 0.04126 0.02088 0.05677 0.01551 #&gt; 8 5000 150 3 3 0.04164 0.01846 0.05501 0.01337 #&gt; 9 5000 150 4 4 0.04229 0.02137 0.05677 0.01448 #&gt; 10 5000 150 5 5 0.04181 0.02328 0.05844 0.01663 #&gt; 11 10000 50 2 2 0.04410 0.02417 0.06688 0.02278 #&gt; 12 10000 50 3 3 0.04418 0.02616 0.07366 0.02948 #&gt; 13 10000 50 2 2 0.04318 0.02261 0.06669 0.02351 #&gt; 14 10000 50 1 1 0.04280 0.01993 0.06367 0.02087 #&gt; 15 10000 50 0 0 0.04234 0.01641 0.05928 0.01694 #&gt; 16 10000 15 0 0 0.04331 0.02039 0.06699 0.02369 #&gt; 17 10000 15 0 0 0.04424 0.02027 0.06700 0.02276 #&gt; 18 10000 15 0 0 0.04330 0.01984 0.06587 0.02257 #&gt; 19 10000 15 1 1 0.04293 0.02313 0.07342 0.03049 #&gt; 20 4000 15 3 3 0.04527 0.03047 0.10417 0.05889 In this case, the output shows that the estimate of the misstatement in the population is 4.34%, with the 95% credible interval ranging from 3.45% to 5.33%. Note that this population estimate is substantially less uncertain than that of the no pooling approach. Note that, like in the no pooling approach, the stratum estimates are different from each other but lie closer together and are less uncertain. plot(result_pp, type = &quot;estimates&quot;) The prior and posterior distribution for the population misstatement can be requested via the plot() function. plot(result_pp, type = &quot;posterior&quot;) "],["evaluation-using-data-1.html", "6.4 Evaluation using data", " 6.4 Evaluation using data For this example, we take the allowances that set that comes with the package. This data set contains 3500 financial statement line items, each with a booked value bookValue and, for illustrative purposes, and audited (true) value auditValue. Since the focus of this vignette is the evaluation stage in the audit, the sample is already indicated in the data set. The performance materiality in this example is set to 5%. data(allowances) head(allowances) #&gt; item branch bookValue auditValue times #&gt; 1 1 12 1600 1600 1 #&gt; 2 2 12 1625 NA 0 #&gt; 3 3 12 1775 NA 0 #&gt; 4 4 12 1250 1250 1 #&gt; 5 5 12 1400 NA 0 #&gt; 6 6 12 1190 NA 0 Evaluating a stratified sample using data requires specification of the data, values, values.audit and strata arguments in the evaluation() function. In this case, the units are monetary and calculated by aggregating the book values of the items in each stratum. N.units &lt;- aggregate(allowances$bookValue, list(allowances$branch), sum)$x 6.4.1 Classical Evaluation The call below evaluates the allowances sample using a classical stratified evaluation procedure, in which the stratum estimates are poststratified to arrive at the population estimate. x &lt;- evaluation( materiality = 0.05, data = allowances, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot;, strata = &quot;branch&quot;, times = &quot;times&quot;, alternative = &quot;two.sided&quot;, N.units = N.units ) summary(x) #&gt; #&gt; Classical Audit Sample Evaluation Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Population size: 16772249 #&gt; Materiality: 0.05 #&gt; Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 #&gt; Method: poisson #&gt; #&gt; Data: #&gt; Sample size: 1604 #&gt; Number of errors: 401 #&gt; Sum of taints: 252.9281046 #&gt; #&gt; Results: #&gt; Most likely error: 0.14723 #&gt; 95 percent confidence interval: [0.12549, 0.18239] #&gt; Precision: 0.03516 #&gt; p-value: NA #&gt; #&gt; Strata (16): #&gt; N n x t mle lb ub precision p.value #&gt; 1 317200.09 87 6 1.27814 0.01469 0.00073 0.06950 0.05481 0.46285 #&gt; 2 2792814.33 305 233 193.23313 0.63355 0.54558 0.72945 0.09590 0.00000 #&gt; 3 1144231.69 55 3 3.00000 0.05455 0.01105 0.15940 0.10486 0.75827 #&gt; 4 414202.89 70 45 15.05094 0.21501 0.11878 0.35434 0.13933 0.00000 #&gt; 5 96660.53 18 1 0.64537 0.03585 0.00015 0.27456 0.23871 0.59343 #&gt; 6 348006.13 34 1 0.17866 0.00525 0.00000 0.11926 0.11401 1.00000 #&gt; 7 2384079.33 55 14 9.44448 0.17172 0.07885 0.32122 0.14950 0.00058 #&gt; 8 1840399.33 96 1 0.00813 0.00008 0.00000 0.03860 0.03852 0.10355 #&gt; 9 563957.70 92 0 0.00000 0.00000 0.00000 0.04010 0.04010 0.01783 #&gt; 10 3198877.73 201 7 0.92023 0.00458 0.00009 0.02703 0.02245 0.00122 #&gt; 11 1983299.06 128 7 1.50034 0.01172 0.00084 0.05013 0.03841 0.10773 #&gt; 12 319144.13 86 5 1.68141 0.01955 0.00174 0.07806 0.05851 0.46069 #&gt; 13 148905.79 25 0 0.00000 0.00000 0.00000 0.14756 0.14756 0.64187 #&gt; 14 513058.76 150 0 0.00000 0.00000 0.00000 0.02459 0.02459 0.00134 #&gt; 15 432007.61 150 39 21.80000 0.14533 0.09026 0.22045 0.07511 0.00001 #&gt; 16 275403.70 52 39 4.18726 0.08052 0.02237 0.20215 0.12163 0.12258 In this case, the output shows that the estimate of the misstatement in the population is 14.72%, with the 95% confidence interval ranging from 12.55% to 18.26%. The precision of the population estimate is 3.54%. The stratum estimates can be seen in the output of the summary() function and are visualized below. plot(x, type = &quot;estimates&quot;) 6.4.2 Bayesian Evaluation Bayesian inference can improve upon the estimates of the classical approach by pooling information between strata where possible. The call below evaluates the allowances sample using a Bayesian multilevel stratified evaluation procedure, in which the stratum estimates are poststratified to arrive at the population estimate. x &lt;- evaluation( materiality = 0.05, data = allowances, prior = TRUE, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot;, strata = &quot;branch&quot;, times = &quot;times&quot;, alternative = &quot;two.sided&quot;, N.units = N.units, pooling = &quot;partial&quot; ) summary(x) #&gt; #&gt; Bayesian Audit Sample Evaluation Summary #&gt; #&gt; Options: #&gt; Confidence level: 0.95 #&gt; Population size: 16772249 #&gt; Materiality: 0.05 #&gt; Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 #&gt; Method: poisson #&gt; Prior distribution: Determined via MCMC sampling #&gt; #&gt; Data: #&gt; Sample size: 1350 #&gt; Number of errors: 401 #&gt; Sum of taints: 224.657517 #&gt; #&gt; Results: #&gt; Posterior distribution: Determined via MCMC sampling #&gt; Most likely error: 0.1555 #&gt; 95 percent credible interval: [0.1458, 0.17009] #&gt; Precision: 0.014595 #&gt; BF₁₀: 3.1386e+15 #&gt; #&gt; Strata (16): #&gt; N n x t mle lb ub precision #&gt; 1 317200.09 62 6 1.07814 0.02037 0.01356 0.03659 0.01622 #&gt; 2 2792814.33 283 233 176.87807 0.60930 0.57298 0.65128 0.04198 #&gt; 3 1144231.69 55 3 3.00000 0.16735 0.11682 0.24582 0.07847 #&gt; 4 414202.89 48 45 11.65094 0.27653 0.22254 0.34868 0.07214 #&gt; 5 96660.53 9 1 0.21512 0.02207 0.01055 0.08932 0.06725 #&gt; 6 348006.13 14 1 0.04467 0.01233 0.00723 0.04022 0.02790 #&gt; 7 2384079.33 44 14 6.65401 0.13637 0.09156 0.21540 0.07903 #&gt; 8 1840399.33 78 1 0.00813 0.00640 0.00458 0.00961 0.00320 #&gt; 9 563957.70 74 0 0.00000 0.00608 0.00461 0.00957 0.00349 #&gt; 10 3198877.73 184 7 0.89982 0.00804 0.00615 0.01074 0.00270 #&gt; 11 1983299.06 111 7 1.35066 0.01525 0.01077 0.02243 0.00718 #&gt; 12 319144.13 56 5 1.19069 0.08428 0.05625 0.14502 0.06074 #&gt; 13 148905.79 10 0 0.00000 0.01216 0.00636 0.04545 0.03329 #&gt; 14 513058.76 150 0 0.00000 0.00472 0.00377 0.00633 0.00161 #&gt; 15 432007.61 128 39 18.30000 0.27398 0.23217 0.33730 0.06332 #&gt; 16 275403.70 44 39 3.38726 0.07640 0.05784 0.10161 0.02521 The output shows that the estimate of the misstatement in the population is 15.66%, with the 95% credible interval ranging from 14.59% to 17%. The precision of the population estimate is 1.34%, which is substantially lower than that of the classical approach. The stratum estimates can be seen in the output of the summary() function and are visualized below. plot(x, type = &quot;estimates&quot;) The prior and posterior distribution for the population misstatement can be requested via the plot() function. plot(x, type = &quot;posterior&quot;) "],["CHAPTER-7.html", "Chapter 7 Other Software", " Chapter 7 Other Software This chapter discusses other R-related open-source software implementing statistical techniques for audit sampling. "],["jasp-for-audit-gui.html", "7.1 JASP for Audit (GUI)", " 7.1 JASP for Audit (GUI) JASP for Audit (Derks, Swart, Wagenmakers, et al. 2021) is an add-on module for JASP (JASP Team 2022), based on the jfa package, that facilitates statistical audit sampling. Concretely, it contains graphical user interfaces (GUI’s) for calculating sample sizes, selecting items according to standard audit sampling techniques, and performing inference about the population misstatement on the basis of a data sample or summary statistics of a sample. The module also features Bayesian equivalents of these analyses that enable the user to easily incorporate prior information into the statistical procedure. In all analyses, the Audit module offers explanatory text that helps the auditor in interpreting, explaining, and reporting the analysis. Since JASP for Audit is an R-based GUI around jfa, its functionality can be mapped almost one-on-one to that of the package. Figure 7.1: The JASP welcome screen. 7.1.1 Planning Planning a sample in JASP for Audit works similar to how you would do it in jfa. For example, the screenshot below shows how to plan a minimum sample size for a performance materiality of 5% using a beta(1, 1) prior distribution, while expecting zero misstatements in the sample. Figure 7.2: The JASP interface for planning a sample. In jfa, these results can be reproduced via the following command: planning(materiality = 0.05, likelihood = &quot;binomial&quot;, prior = TRUE) #&gt; #&gt; Bayesian Audit Sample Planning #&gt; #&gt; minimum sample size = 58 #&gt; sample size obtained in 59 iterations via method &#39;binomial&#39; + &#39;prior&#39; 7.1.2 Selection Selecting a sample in JASP for Audit works similar to how you would do it in jfa. For example, the screenshot below shows how to select a sample of 60 monetary units from the BuildIt data set that is included in the package using a fixed interval sampling method with a starting point of 1. set.seed(1) data(BuildIt) result &lt;- selection(data = BuildIt, size = 60, method = &quot;interval&quot;, start = 1, units = &quot;values&quot;, values = &quot;bookValue&quot;) head(result$sample) #&gt; row times ID bookValue auditValue #&gt; 1 1 1 82884 242.61 242.61 #&gt; 2 63 1 51272 248.40 248.40 #&gt; 3 123 1 37985 562.09 562.09 #&gt; 4 183 1 96080 449.07 449.07 #&gt; 5 240 1 92819 690.08 690.08 #&gt; 6 302 1 94296 198.59 198.59 Figure 7.3: The JASP interface for selecting a sample. 7.1.3 Evaluation Evaluating a sample in JASP for Audit works similar to how you would do it in jfa. For example, the screenshot below shows how to evaluating a sample of \\(n = 60\\) containing \\(x = 0\\) misstatements against a performance materiality of 5% using a beta(1, 1) prior distribution. Figure 7.4: The JASP interface for evaluating a sample. In jfa, these results can be reproduced via the following command: evaluation(materiality = 0.05, method = &quot;binomial&quot;, x = 2, n = 93, prior = TRUE) #&gt; #&gt; Bayesian Audit Sample Evaluation #&gt; #&gt; data: 2 and 93 #&gt; number of errors = 2, number of samples = 93, taint = 2, BF₁₀ = #&gt; 111.66 #&gt; alternative hypothesis: true misstatement rate is less than 0.05 #&gt; 95 percent credible interval: #&gt; 0.0000000 0.0654624 #&gt; most likely estimate: #&gt; 0.021505 #&gt; results obtained via method &#39;binomial&#39; + &#39;prior&#39; References "],["mus-r.html", "7.2 MUS (R)", " 7.2 MUS (R) MUS (Prömpers and Guimarães 2019) is an R package proving sampling and evaluation methods to apply Monetary Unit Sampling during an audit of financial statements. The package is available via CRAN and can be downloaded with: install.packages(&quot;MUS&quot;) References "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
