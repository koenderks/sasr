[["index.html", "Statistical Audit Sampling with R, 1st Edition Welcome", " Statistical Audit Sampling with R, 1st Edition Koen Derks 2022-12-15 Welcome Welcome to the book Statistical Audit Sampling with R, a practical guide for auditors that want to use state-of-the-art statistical methodology in their audit sampling activities. This book focuses on audit sampling but approaches it from two viewpoints: the classical (frequentist) approach and the Bayesian approach. Through these two lenses, it explains the statistical theory underlying commonly applied audit sampling procedures and demonstrates how to perform these procedures in a statistically sound manner compliant with international auditing standards using the jfa (Derks 2022) R package. Please keep in mind that this is a preview release and much content is still missing. If you are missing some of the content today, then check back tomorrow: This book is actively being worked on. References "],["preface.html", "Preface", " Preface This book is for auditors who want to employ statistical audit sampling in audit practice using the statistical programming language R. It thoroughly, but understandably, covers an array of state-of-the-art statistical instruments available to auditors, explaining what they are, the assumptions on which they are based, and when they should be used. Furthermore, it offers concrete suggestions for incorporating advanced statistical methods into audit practice and demonstrates their usefulness using real-life case studies. Hopefully, this book can be a resource for the efficient and effective use of statistical methods in audit practice. This book adresses the need for a transparent and clear description of the application of statistical sampling methodology in audit practice. I have found that most guidance about audit sampling contain insufficient detail to allow for transparent reproduction or understanding. Furthermore, the practical implementation of these methods is often untransparent and closed-source via commercial tools or excel sheets internally used by the audit firm. As such, auditors may try to understand the mechanisms at play but are often left with more questions that they arrived with. This book aims to give full control back to the auditor when it comes to explaining the statistical methodology used in practice. This book focuses on audit sampling but approaches it from two viewpoints: the classical (frequentist) approach and the Bayesian approch. Through these two lenses, it explains the statistical theory underlying commonly applied audit sampling procedures, and demonstrates how to perform these procedures in a statistically sound manner compliant with international auditing standards. It also makes the case for adopting Bayesian statistical methods in the audit practice. Bayesian inference can bring many practical advantages for the auditor and this book will discuss these in detail. In part 1, Chapter 1 provides an introduction to the R programming language. Chapter 2 gives a brief overview of how statistical methodology can be applied in the audit. In part 2, Chapter 3 discusses the basic statistical theory underlying audit sampling. Chapter 4 discusses the standard audit sampling workflow. Chapter 5, 6, 7, and 8 go into more detail about using statistial methods to plan, select and evaluate audit samples. Finally, Chapter 9 discusses other software implementations of audit sampling. In part 3, Chapter 10 gives an overview of the basic statistical theory underlying data auditing. "],["CHAPTER-R-BASICS.html", "Chapter 1 R Basics", " Chapter 1 R Basics This chapter covers the basics: installing and using packages and loading data. "],["installing-a-package.html", "1.1 Installing a Package", " 1.1 Installing a Package A package is a small bundle of code that an R user wrote and uploaded to a central server for anybody to access, download and use. In many cases, you will download an R package from the CRAN server. This can be done via the install.packages() function by providing the package name in quotes. For example, an important package for data visualization is ggplot2. To install this package, you can simply run: install.packages(&quot;ggplot2&quot;) This book illustrates its concepts and ideas using the jfa package, which can also be downloaded from CRAN. You can install this package by running the following command in R: install.packages(&quot;jfa&quot;) "],["loading-a-package.html", "1.2 Loading a Package", " 1.2 Loading a Package Once you have installed a package, you must load it into every R session. To load a package into your R session, call library() and provide the name of the package (without quotes) that you want to load. For example, before running the examples in this book, you can load the jfa package with: library(jfa) If you want a deeper understanding of how the jfa package works, or want to look at the source code of the package, see the package website. "],["upgrading-a-package.html", "1.3 Upgrading a Package", " 1.3 Upgrading a Package R packages are updated regularly. To update a package in your R library you should call update.packages() and provide the name of the package that you want to update in quotes. For example, each time there is a new release of the jfa package, you can update it by running: update.packages(&quot;jfa&quot;) "],["loading-data-from-a-csv-file.html", "1.4 Loading Data from a CSV File", " 1.4 Loading Data from a CSV File A commonly used data type is a .csv file. You can load this type of files via the read.csv() function. For example, if the file example.csv is in the current working directory, you can load it by running: read.csv(&quot;example.csv&quot;) "],["loading-data-from-an-excel-file.html", "1.5 Loading Data from an Excel File", " 1.5 Loading Data from an Excel File Another commonly used data type are Excel files. You can load this type of files via the read_excel() function from the readxl package. For this to work, you should first install this package using the install.packages() command and load it into the R session using a call to library(). For example, if the file example.xlsx is in the current working directory, and the data you want to load is on the first worksheet, you can load it by running: {r, eval=FALSE}\\ install.packages(\"readxl\") library(readxl) read_excel(\"example.csv\", sheet = 1) "],["CHAPTER-BASIC-CONCEPTS.html", "Chapter 2 Basic Concepts", " Chapter 2 Basic Concepts This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-THE-AUDIT-SAMPLING-WORKFLOW.html", "Chapter 3 The Audit Sampling Workflow", " Chapter 3 The Audit Sampling Workflow This chapter aims to show how the jfa package facilitates auditors in the standard audit sampling workflow (hereafter “audit workflow”). In this example of the audit workflow, we will consider the case of BuildIt. BuildIt is a fictional construction company in the United States that is being audited by an external auditor for a fictional audit firm. At the end of the year, BuildIt has provided a summary of its financial situation in the financial statements. The objective of the auditor is to formulate an opinion about the fairness BuildIt’s financial statements. The auditor needs to obtain sufficient and appropriate evidence for the hypothesis that the misstatement in the financial statements is lower than a certain amount: the materiality. If the financial statements contain misstatements that are considered material, this means that the errors in the financial statements are large enough that they might influence the decision of stakeholders relying on these financial statements. The performance materiality is the materiality that applies to each of the populations on which the financial statements are based. For this example, the performance materiality is set at 5% of the total value of the population. In this example, we focus on the BuildIt data set that comes with the jfa package. data(&quot;BuildIt&quot;) #head(BuildIt) The population of interest consists of 3500 items, each with a booked value. Let’s assume that, before performing audit sampling, the auditor has assessed the quality of BuildIt’s internal control systems and found that they were working properly. In order to formulate an opinion about the misstatement in the population, the auditor separates their audit workflow into four stages. First, they will need to plan the minimum size of a sample they need to inspect to perform inference about the population. Second, they will need to select the required sample from the population. Third, they will need to inspect the selected sample and determine the audit (true) value of the items it contains. Fourth, they will need to use the information from the inspected sample to perform inference about the misstatement in the population. "],["setting-up-the-audit.html", "3.1 Setting Up the Audit", " 3.1 Setting Up the Audit The auditor wants to make a statement that, with 95% confidence, the misstatement in the population is lower than the performance materiality of 5%. Based on last year’s audit at BuildIt, where the upper bound of the misstatement turned out to be 2.5%, they want to tolerate at most 2.5% errors in the intended sample. The auditor can therefore re-formulate their statistical statement as that they want to conclude that, when 2.5% errors are found in the sample, they can conclude with 95% confidence that the misstatement in the population is lower than the performance materiality of 5%. Below, the auditor defines the performance materiality, confidence level, and expected misstatements in the sample. # Specify the confidence, materiality, and expected errors. confidence &lt;- 0.95 # 95% materiality &lt;- 0.05 # 5% expected &lt;- 0.025 # 2.5% Many audits are performed according to the audit risk model (ARM), which determines that the uncertainty about the auditor’s statement as a whole (1 - the confidence) is a factor of three terms: the inherent risk, the control risk, and the detection risk. Inherent risk is the risk posed by an error in BuildIt’s financial statement that could be material, before consideration of any related control systems (e.g., computer systems). Control risk is the risk that a material misstatement is not prevented or detected by BuildIt’s internal control systems. Detection risk is the risk that the auditor will fail to find material misstatements that exist in an BuildIt’s financial statements. The ARM is practically useful because for a given level of audit risk, the tolerable detection risk bears an inverse relation to the other two risks. The ARM is useful for the auditor because it enables them to incorporate existing information on BuildIt’s organization to increase the required risk that they will fail to find a material misstatement. \\[ \\text{Audit risk} = \\text{Inherent risk} \\,\\times\\, \\text{Control risk} \\,\\times\\, \\text{Detection risk}\\] Usually the auditor judges inherent risk and control risk on a three-point scale consisting of low, medium, and high. Different audit firms handle different standard percentages for these categories. The auditor’s firm defines the probabilities of low, medium, and high respectively as 50%, 60%, and 100%. Because the auditor assessed BuildIt’s internal control systems, they assess the control risk as medium (60%). # Specify the inherent risk (ir) and control risk (cr). ir &lt;- 1 # 100% cr &lt;- 0.6 # 60% "],["planning-an-audit-sample.html", "3.2 Planning an Audit Sample", " 3.2 Planning an Audit Sample The auditor can choose to either perform a frequentist analysis, where they use the increased detection risk as their level of uncertainty, or perform a Bayesian analysis, where they incorporate the information about the control risk into a prior distribution. For this example, we will show how to perform a Bayesian analysis. A frequentist analysis can easily be done through the following functions by setting prior = FALSE. In a frequentist analysis, the auditor immediately uses the adjusted confidence to calculate the sample size via the planning() function. # Adjust the required confidence for a frequentist analysis. c.adj &lt;- 1 - ((1 - confidence) / (ir * cr)) # Step 1: Calculate the required sample size. stage1 &lt;- planning(materiality = materiality, expected = expected, conf.level = c.adj) The auditor can then inspect the result from the planning procedure by using the summary() function. The result shows that the auditor needs to select a sample of 178 items so that, when at most 4.45 misstatements are found, they can conclude with 91.66% confidence that the misstatement in BuildIt’s population is lower than the performance materiality of 5%. summary(stage1) # # Classical Audit Sample Planning Summary # # Options: # Confidence level: 0.91667 # Materiality: 0.05 # Hypotheses: H₀: Θ &gt;= 0.05 vs. H₁: Θ &lt; 0.05 # Expected: 0.025 # Likelihood: poisson # # Results: # Minimum sample size: 178 # Tolerable errors: 4.45 # Expected most likely error: 0.025 # Expected upper bound: 0.049986 # Expected precision: 0.024986 # Expected p-value: 0.083211 "],["selecting-a-sample.html", "3.3 Selecting a Sample", " 3.3 Selecting a Sample The auditor is now ready to select the required 178 items from the population. They can choose to do this according to one of two statistical methods. In record sampling (units = \"items\"), inclusion probabilities are assigned on the item level, treating item with a high value and a low value the same, an item of $5,000 is equally likely to be selected as an item of $1,000. In monetary unit sampling (units = \"values\"), inclusion probabilities are assigned on the level of individual monetary units (e.g., a dollar). When a dollar is selected to be in the sample, the item that includes that dollar is selected. This favors items with a higher value, as an item with a value of $5,000 is now five times more likely to be selected than an item with a value of $1,000. The auditor chooses to use monetary unit sampling, as they wants to include more high-valued items. The selection() function enables them to select the sample from the population. She uses the stage1 object as an input for the selection() function, since this passes the calculated sample size to the function. # Step 2: Draw a sample from the financial statements. stage2 &lt;- selection(data = BuildIt, size = stage1, units = &quot;values&quot;, values = &quot;bookValue&quot;, method = &quot;interval&quot;) Like before, the auditor can inspect the outcomes of their sampling procedure by using the summary() function. summary(stage2) # # Audit Sample Selection Summary # # Options: # Requested sample size: 178 # Sampling units: monetary units # Method: fixed interval sampling # Starting point: 1 # # Data: # Population size: 3500 # Population value: 1403221 # Selection interval: 7883.3 # # Results: # Selected sampling units: 178 # Proportion of value: 0.062843 # Selected items: 178 # Proportion of size: 0.050857 "],["performing-the-audit.html", "3.4 Performing the Audit", " 3.4 Performing the Audit The selected sample can be isolated by indexing the sample object from the sampling result. # Step 3: Isolate the sample for execution of the audit. sample &lt;- stage2$sample Next, the auditor can execute the audit by annotating the items in the sample with their audit values (for exampling by writing the sample to a .csv file using write.csv(). They can then load the annotated sample back into the R session for further evaluation. For this example, the audit values of the sample items are already included in the auditValue column of the data set. # To write the sample to a .csv file: write.csv(x = sample, file = &quot;auditSample.csv&quot;, row.names = FALSE) # To load annotated sample back into R: sample &lt;- read.csv(file = &quot;auditSample.csv&quot;) "],["evaluating-the-sample.html", "3.5 Evaluating the Sample", " 3.5 Evaluating the Sample Using the annotated sample, the auditor can perform inference about the misstatement in the population via the evaluation() function. # Step 4: Evaluate the sample stage4 &lt;- evaluation( materiality = materiality, conf.level = c.adj, data = sample, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot; ) The auditor can inspect the outcomes of her inference by using the summary() function. The resulting 91.66% upper bound is 1.396%, which is lower than the performance materiality of 5%. summary(stage4) # # Classical Audit Sample Evaluation Summary # # Options: # Confidence level: 0.91667 # Materiality: 0.05 # Hypotheses: H₀: Θ &gt;= 0.05 vs. H₁: Θ &lt; 0.05 # Method: poisson # # Data: # Sample size: 178 # Number of errors: 0 # Sum of taints: 0 # # Results: # Most likely error: 0 # 91.66667 percent confidence interval: [0, 0.01396] # Precision: 0.01396 # p-value: 0.00013639 "],["making-a-decision.html", "3.6 Making a Decision", " 3.6 Making a Decision Since the 91.66% upper confidence bound on the misstatement in population is lower than the performance materiality, the auditor has obtained sufficient evidence to conclude that the population does not contain material misstatements. The auditor can create a html or pdf report of the statistical results using the report() function, as shown below. report(stage4, file = &quot;report.html&quot;) "],["CHAPTER-PLANNING.html", "Chapter 4 Planning", " Chapter 4 Planning This chapter illustrates how to use the planning() function from the jfa package to calculate a minimum sample size for audit sampling. "],["required-information.html", "4.1 Required Information", " 4.1 Required Information First, planning a minimum sample requires knowledge of the conditions that lead to acceptance or rejection of the population (i.e., the sampling objectives). Typically, sampling objectives can be classified into one or both of the following: Hypothesis testing: The goal of the sample is to obtain evidence for or against the claim that the misstatement in the population is lower than a given value (i.e., the performance materiality). Estimation: The goal of the sample is to obtain an accurate estimate of the misstatement in the population (with a minimum precision). Second, it is advised to specify the expected (or tolerable) misstatements in the sample. The expected misstatements are the misstatements that you allow in the sample, while still retaining the desired amount of assurance about the population. It is strongly recommended to set the value for the expected misstatements in the sample conservatively to minimize the chance of the observed misstatements in the sample exceeding the expected misstatements, which would imply that insufficient work has been done in the end. Next to determining the sampling objective(s) and the expected misstatements, it is also important to determine the statistical distribution linking the sample outcomes to the population misstatement. This distribution is called the likelihood (i.e., poisson, binomial, orhypergeometric). All three aforementioned likelihoods are commonly used in an audit sampling context, however, poisson is the default likelihood in jfa because it is the most conservative of the three. "],["planning-a-sample.html", "4.2 Planning a Sample", " 4.2 Planning a Sample To illustrate how the planning() function can be used to calculate a minimum sample size for audit sampling, we will first demonstrate how to set up a sample with the purpose of hypothesis testing and subsequently show how to plan a sample with the purpose of estimation. In both cases, we will tolerate zero misstatements in the sample. 4.2.1 Hypothesis Testing First, let’s take a look at how you can use the planning() function to calculate the minimum sample size for testing the hypothesis that the misstatement in the population is lower than the performance materiality. In this example the performance materiality is set to 5% of the total population value, meaning that the population cannot contain more than 5% misstatement. Sampling objective: Calculate a minimum sample size such that, when no misstatements are found in the sample, there is a 95% chance that the misstatement in the population is lower than 5% of the population value. A minimum sample size for this sampling objective can be calculated by specifying the materiality parameter in the planning() function, see the command below. Next, a summary of the statistical results can be obtained using the summary() function. The result shows that, given zero tolerable errors, the minimum sample size is 60 units. plan &lt;- planning(materiality = 0.05, expected = 0, conf.level = 0.95) summary(plan) # # Classical Audit Sample Planning Summary # # Options: # Confidence level: 0.95 # Materiality: 0.05 # Hypotheses: H₀: Θ &gt;= 0.05 vs. H₁: Θ &lt; 0.05 # Expected: 0 # Likelihood: poisson # # Results: # Minimum sample size: 60 # Tolerable errors: 0 # Expected most likely error: 0 # Expected upper bound: 0.049929 # Expected precision: 0.049929 # Expected p-value: 0.049787 4.2.2 Estimation Next, let’s take a look at how you can use the planning() function to calculate the minimum sample size for estimating the misstatement in the population with a minimum precision. The precision is defined as the difference between the most likely misstatement and the upper confidence bound on the misstatement. For this example, the minimum precision is set to 2% of the population value. Sampling objective: Calculate a minimum sample size such that, when zero misstatements are found in the sample, there is a 95% chance that the misstatement in the population is at most 2% above the most likely misstatement. A minimum sample size for this sampling objective can be calculated by specifying the min.precision parameter in the planning() function, see the command below. The result shows that, given zero tolerable errors, the minimum sample size is 150 units. planning(min.precision = 0.02, expected = 0, conf.level = 0.95) # # Classical Audit Sample Planning # # minimum sample size = 150 # sample size obtained in 151 iterations via method &#39;poisson&#39; 4.2.3 Bayesian Planning Performing Bayesian planning requires an input for the prior argument in the planning() function. Setting prior = TRUE performs Bayesian planning using a default prior conjugate to the specified likelihood. For example, the command below uses a default gamma(1, 1) prior distribution to plan the sample. plan &lt;- planning(materiality = 0.05, expected = 0, conf.level = 0.95, prior = TRUE) summary(plan) # # Bayesian Audit Sample Planning Summary # # Options: # Confidence level: 0.95 # Materiality: 0.05 # Hypotheses: H₀: Θ &gt; 0.05 vs. H₁: Θ &lt; 0.05 # Expected: 0 # Likelihood: poisson # Prior distribution: gamma(α = 1, β = 1) # # Results: # Minimum sample size: 59 # Tolerable errors: 0 # Posterior distribution: gamma(α = 1, β = 60) # Expected most likely error: 0 # Expected upper bound: 0.049929 # Expected precision: 0.049929 # Expected BF₁₀: 372.25 You can inspect how the prior distribution compares to the expected posterior distribution by using the plot() function. The expected posterior distribution is the posterior distribution that would occur if you actually observed the planned sample containing the expected misstatements. plot(plan) The input for the prior argument can also be an object created by the auditPrior function. If planning() receives a prior for which there is a conjugate likelihood available, it will inherit the likelihood from the prior. For example, the command below uses a custom beta(1, 10) prior distribution to plan the sample using the binomial likelihood. prior &lt;- auditPrior(method = &quot;param&quot;, likelihood = &quot;binomial&quot;, alpha = 1, beta = 10) planning(materiality = 0.05, expected = 0, conf.level = 0.95, prior = prior) # # Bayesian Audit Sample Planning # # minimum sample size = 49 # sample size obtained in 50 iterations via method &#39;binomial&#39; + &#39;prior&#39; "],["CHAPTER-SELECTION.html", "Chapter 5 Selection", " Chapter 5 Selection This chapter outlines the most commonly used sampling methodology for auditing and shows how to select a sample using these methods with the jfa package. Auditors are often required to assess balances or processes that involve a large number of items. Since they cannot inspect all of these items individually, they need to select a subset (i.e., a sample) from the total population to make a statement about a certain characteristic of the population. For this purpose, various selection methodologies are available that have become standard in an audit context. "],["sampling-units.html", "5.1 Sampling Units", " 5.1 Sampling Units Selecting a subset from the population requires knowledge of the sampling units; physical representations of the population that needs to be audited. Generally, the auditor has to choose between two types of sampling units: individual items in the population or individual monetary units in the population. In order to perform statistical selection, the population must be divided into individual sampling units that can be assigned a probability to be included in the sample. The total collection of all sampling units which have been assigned a selection probability is called the sampling frame. 5.1.1 Items A sampling unit for record (i.e., attributes) sampling is generally a characteristic of an item in the population. For example, suppose that you inspect a population of receipts. A possible sampling unit for record sampling can be the date of payment of the receipt. When a sampling unit (e.g., date of payment) is selected by the sampling method, the population item that corresponds to the sampled unit is included in the sample. 5.1.2 Monetary Units A sampling unit for monetary unit sampling is different than a sampling unit for record sampling in that it is an individual monetary unit within an item or transaction, like an individual dollar. For example, a single sampling unit can be the 10\\(^{th}\\) dollar from a specific receipt in the population. When a sampling unit (e.g., individual dollar) is selected by the sampling method, the population item that includes the sampling unit is included in the sample. "],["sampling-methods.html", "5.2 Sampling Methods", " 5.2 Sampling Methods This section discusses the four sampling methods implemented in jfa. First, for notation, let the the population \\(N\\) be defined as the total set of individual sampling units \\(x_i\\). \\[N = \\{x_1, x_2, \\dots, x_N\\}.\\] In statistical sampling, every sampling unit \\(x_i\\) in the population must receive a selection probability \\(p(x_i)\\). The purpose of the sampling method is to provide a framework to assign selection probabilities to each of the sampling units, and subsequently draw sampling units from the population until a set of size \\(n\\) has been created. The next section discusses which sampling methods are available in jfa. To illustrate the outcomes for different sampling methods, we will use the BuildIt data set that can be loaded using the code below. data(BuildIt) 5.2.1 Fixed Interval Sampling Fixed interval sampling is a method designed for yielding representative samples from monetary populations. The algorithm determines a uniform interval on the (optionally ranked) sampling units. Next, a starting point is handpicked or randomly selected in the first interval and a sampling unit is selected throughout the population at each of the uniform intervals from the starting point. For example, if the interval has a width of 10 sampling units and sampling unit number 5 is chosen as the starting point, the sampling units 5, 15, 25, etc. are selected to be included in the sample. The number of required intervals \\(I\\) can be determined by dividing the number of sampling units in the population by the required sample size: \\[I = \\frac{N}{n},\\] in which \\(n\\) is the required sample size and \\(N\\) is the total number of sampling units in the population. If the space between the selected sampling units is equal, the selection probability for each sampling unit is theoretically defined as: \\[p(x) = \\frac{1}{I},\\] with the property that the space between selected units \\(i\\) is the same as the interval \\(I\\), see Figure 1. However, in practice the selection is deterministic and completely depends on the chosen starting points (using start). Figure 1: Illustration of fixed interval sampling The fixed interval method yields a sample that allows every sampling unit in the population an equal chance of being selected. However, the fixed interval method has the property that all items in the population with a monetary value larger than the interval \\(I\\) have an selection probability of one because one of these items’ sampling units are always selected from the interval. Note that, if the population is arranged randomly with respect to its deviation pattern, fixed interval sampling is equivalent to random selection. Advantage(s): The advantage of the fixed interval sampling method is that it is often simple to understand and fast to perform. Another advantage is that, in monetary unit sampling, all items that are greater than the calculated interval will be included in the sample. In record sampling, since units can be ranked on the basis of value, there is also a guarantee that some large items will be in the sample. Disadvantage(s): A pattern in the population can coincide with the selected interval, rendering the sample less representative. What is sometimes seen as an added complication for this method is that the sample is hard to extend after drawing the initial sample. This is due to the chance of selecting the same sampling unit. However, by removing the already selected sampling units from the population and redrawing the intervals this problem can be efficiently solved. As an example, the code below shows how to apply the fixed interval sampling method in a record sampling and a monetary unit sampling setting. Note that, by default, the first sampling unit from each interval is selected. However, this can be changed by setting the argument start = 1 to a different value. # Record sampling sample &lt;- selection(data = BuildIt, size = 100, units = &quot;items&quot;, method = &quot;interval&quot;, start = 1) #head(sample$sample, n = 6) # Monetary unit sampling sample &lt;- selection(data = BuildIt, size = 100, units = &quot;values&quot;, method = &quot;interval&quot;, values = &quot;bookValue&quot;, start = 1) #head(sample$sample, n = 6) 5.2.2 Cell Sampling The cell sampling method divides the (optionally ranked) population into a set of intervals \\(I\\) that are computed through the previously given equations. Within each interval, a sampling unit is selected by randomly drawing a number between 1 and the interval range \\(I\\). This causes the space \\(i\\) between the sampling units to vary. Like in the fixed interval sampling method, the selection probability for each sampling unit is defined as: \\[p(x) = \\frac{1}{I}.\\] Figure 2: Illustration of cell sampling The cell sampling method has the property that all items in the population with a monetary value larger than twice the interval \\(I\\) have a selection probability of one. Advantage(s): More sets of samples are possible than in fixed interval sampling, as there is no systematic interval \\(i\\) to determine the selections. It is argued that the cell sampling algorithm offers a solution to the pattern problem in fixed interval sampling. Disadvantage(s): A disadvantage of this sampling method is that not all items in the population with a monetary value larger than the interval have a selection probability of one. Besides, population items can be in two adjacent cells, thereby creating the possibility that an items is included in the sample twice. As an example, the code below shows how to apply the cell sampling method in a record sampling and a monetary unit sampling setting. It is important to set a seed to make the results reproducible. # Record sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;items&quot;, method = &quot;cell&quot;) #head(sample$sample, n = 6) # Monetary unit sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;values&quot;, method = &quot;cell&quot;, values = &quot;bookValue&quot;) #head(sample$sample, n = 6) 5.2.3 Random Sampling Random sampling is the most simple and straight-forward selection method The random sampling method provides a method that allows every sampling unit in the population an equal chance of being selected, meaning that every combination of sampling units has the same probability of being selected as every other combination of the same number of sampling units. Simply put, the algorithm draws a random selection of size \\(n\\) of the sampling units. Therefore, the selection probability for each sampling unit is defined as: \\[p(x) = \\frac{1}{N},\\] where \\(N\\) is the number of units in the population. To clarify this procedure, Figure 3 provides an illustration of the random sampling method. Figure 3: Illustration of random sampling Advantage(s): The random sampling method yields an optimal random selection, with the additional advantage that the sample can be easily extended by applying the same method again. Disadvantages: Because the selection probabilities are equal for all sampling units there is no guarantee that items with a large monetary value in the population will be included in the sample. As an example, the code below shows how to apply the random sampling (with our without replacement using replace) method in a record sampling and a monetary unit sampling setting. It is important to set a seed to make results reproducible. # Record sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;items&quot;, method = &quot;random&quot;) #head(sample$sample, n = 6) # Monetary unit sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;values&quot;, method = &quot;random&quot;, values = &quot;bookValue&quot;) #head(sample$sample, n = 6) 5.2.4 Modified Sieve Sampling The fourth option for the sampling method is modified sieve sampling (Hoogduin, Hall, &amp; Tsay, 2010). The algorithm starts by selecting a standard uniform random number \\(R_i\\) between 0 and 1 for each item in the population. Next, the sieve ratio: \\[S_i = \\frac{Y_i}{R_i}\\] is computed for each item by dividing the book value of that item by the random number. Lastly, the items in the population are sorted by their sieve ratio \\(S\\) (in decreasing order) and the top \\(n\\) items are selected for inspection. In contrast to the classical sieve sampling method (Rietveld, 1978), the modified sieve sampling method provides precise control over sample sizes. As an example, the code below shows how to apply the modified sieve sampling method in a monetary unit sampling setting. It is important to set a seed to make results reproducible. # Monetary unit sampling set.seed(1) sample &lt;- selection(data = BuildIt, size = 100, units = &quot;values&quot;, method = &quot;sieve&quot;, values = &quot;bookValue&quot;) #head(sample$sample, n = 6) "],["ordering-or-randomizing-the-population.html", "5.3 Ordering or Randomizing the Population", " 5.3 Ordering or Randomizing the Population The selection() function has additional arguments (order, decreasing, and randomize) to preprocess your population before selection. The order argument takes as input a column name in data which determines the order of the population. For example, you can order the population from lowest book value to highest book value before engaging in selection. In this case, you should use the decreasing = FALSE argument. # Ordering population from lowest &#39;bookValue&#39; to highest &#39;bookValue&#39; before MUS set.seed(1) sample &lt;- selection( data = BuildIt, size = 100, units = &quot;values&quot;, values = &quot;bookValue&quot;, order = &quot;bookValue&quot;, decreasing = FALSE ) #head(sample$sample, n = 6) The randomize argument can be used to randomly shuffle the items in the population before selection. # Randomly shuffle population items before MUS set.seed(1) sample &lt;- selection( data = BuildIt, size = 100, units = &quot;values&quot;, values = &quot;bookValue&quot;, randomize = TRUE ) #head(sample$sample, n = 6) "],["CHAPTER-UNSTRATIFIED-EVALUATION.html", "Chapter 6 Unstratified Evaluation", " Chapter 6 Unstratified Evaluation In a non-stratified sampling procedure, the auditor does not take samples from different strata or subgroups in a population. An example of such a situation would be where the auditor is auditing the general ledger of a small business. "],["classical-evaluation.html", "6.1 Classical Evaluation", " 6.1 Classical Evaluation Classical hypothesis testing uses the p-value to make a decision about whether to reject the hypothesis \\(H_0\\) or not. As an example, consider that an auditor wants to verify whether the population contains less than 5 percent misstatement, implying the hypotheses \\(H_1:\\theta&lt;0.05\\) and \\(H_0:\\theta\\geq0.05\\). They have taken a sample of 100 items, of which 1 contained an error. They set the significance level for the p-value to 0.05, implying that \\(p &lt; 0.05\\) will be enough to reject the hypothesis \\(H_0\\). The call below evaluates the sample using a classical non-stratified evaluation procedure. evaluation(materiality = 0.05, x = 1, n = 100) # # Classical Audit Sample Evaluation # # data: 1 and 100 # number of errors = 1, number of samples = 100, taint = 1, p-value = # 0.040428 # alternative hypothesis: true misstatement rate is less than 0.05 # 95 percent confidence interval: # 0.00000000 0.04743865 # most likely estimate: # 0.01 # results obtained via method &#39;poisson&#39; The output shows that the most likely error in the population is estimated to be 1 / 100 = 1% and that the 95% (one-sided) confidence interval ranges from 0% to 4.74%. The output also shows that the p-value is lower than 0.05 implying that the hypothesis \\(H_0\\) can be rejected. Hence, the auditor is able to conclude that the sample provides sufficient evidence to state with reasonable assurance that the population does not contain material misstatement. "],["bayesian-evaluation.html", "6.2 Bayesian Evaluation", " 6.2 Bayesian Evaluation Bayesian hypothesis testing uses the Bayes factor, \\(BF_{10}\\) or \\(BF_{01}\\), to make a statement about the evidence provided by the sample in support for one of the two hypotheses \\(H_1\\) or \\(H_0\\). As an example of how to interpret the Bayes factor, the value of \\(BF_{10} = 10\\) (provided by the evaluation() function) can be interpreted as: the data are 10 times more likely to have occurred underthe hypothesis \\(H_1\\) than under the hypothesis \\(H_0\\). \\(BF_{10} &gt; 1\\) indicates evidence in favor of \\(H_1\\) and against \\(H_0\\), while \\(BF_{10} &lt; 1\\) indicates evidence in favor of \\(H_0\\) and against \\(H_1\\). The evaluation() function returns the value for \\(BF_{10}\\), but \\(BF_{01}\\) can be computed as \\(\\frac{1}{BF_{10}}\\). Consider the previous example of an auditor who wants to verify whether the population contains less than 5 percent misstatement, implying the hypotheses \\(H_1:\\theta&lt;0.05\\) and \\(H_0:\\theta\\geq0.05\\). They have taken a sample of 100 items, of which 1 was found to contain a misstatement. The prior distribution is assumed to be a default beta(1,1) prior. The call below evaluates the sample using a Bayesian non-stratified evaluation procedure. prior &lt;- auditPrior(materiality = 0.05, method = &quot;default&quot;, likelihood = &quot;binomial&quot;) evaluation(materiality = 0.05, x = 1, n = 100, prior = prior) # # Bayesian Audit Sample Evaluation # # data: 1 and 100 # number of errors = 1, number of samples = 100, taint = 1, BF₁₀ = # 515.86 # alternative hypothesis: true misstatement rate is less than 0.05 # 95 percent credible interval: # 0.00000000 0.04610735 # most likely estimate: # 0.01 # results obtained via method &#39;binomial&#39; + &#39;prior&#39; The output shows that the most likely error in the population is estimated to be 1 / 100 = 1% and that the 95% (one-sided) credible interval ranges from 0% to 4.61%. The small difference between the classical and default Bayesian results is due to the prior distribution, which must be proper in order to calculate a Bayes factor (classical results can be emulated by constructing a prior with method = \"strict\" in the auditPrior() function). The Bayes factor in this case is shown to be \\(BF_{10}=515\\), meaning that the data from the sample are about 515 times more likely to occur under the hypothesis of tolerable misstatement than under the hypothesis of material misstatement. Note that this is a very high Bayes factor for the little data that is observed. That is because the Bayes factor is dependent on the prior distribution for \\(\\theta\\). As a rule of thumb, when the prior distribution is highly conservative (as with method = 'default') with respect to the hypothesis of tolerable misstatement, the Bayes factor tends to over quantify the evidence in favor of this hypothesis. You can mitigate this dependency by using a prior distribution that is impartial with respect to the hypotheses via method = \"impartial\" in the auditPrior() function (Derks et al., 2022). prior &lt;- auditPrior(materiality = 0.05, method = &quot;impartial&quot;, likelihood = &quot;binomial&quot;) evaluation(materiality = 0.05, x = 1, n = 100, prior = prior) # # Bayesian Audit Sample Evaluation # # data: 1 and 100 # number of errors = 1, number of samples = 100, taint = 1, BF₁₀ = # 47.435 # alternative hypothesis: true misstatement rate is less than 0.05 # 95 percent credible interval: # 0.00000000 0.04110834 # most likely estimate: # 0.0088878 # results obtained via method &#39;binomial&#39; + &#39;prior&#39; The output shows that \\(BF_{10}=47\\), implying that under the assumption of impartiality there is strong evidence for \\(H_1\\), the hypothesis that the population contains misstatements lower than 5 percent of the population (tolerable misstatement). Since the two prior distributions both resulted in convincing Bayes factors, the results can be considered robust to the choice of prior distribution. Hence, the auditor is able to conclude that the sample provides convincing evidence to state that the population does not contain material misstatement. "],["evaluation-using-data.html", "6.3 Evaluation using Data", " 6.3 Evaluation using Data For this example, we take the allowances that set that comes with the package. This data set contains 3500 financial statement line items, each with a booked value bookValue and, for illustrative purposes, and audited (true) value auditValue. Since the focus of this vignette is the evaluation stage in the audit, the sample is already indicated in the data set. The performance materiality in this example is set to 5%. data(allowances) #head(allowances) Evaluating a non-stratified sample using data requires specification of the data, values and values.audit arguments. The input for these arguments is the name of the specific column in data. 6.3.1 Classical Evaluation The call below evaluates the allowances sample using a classical non-stratified evaluation procedure. x &lt;- evaluation( materiality = 0.05, data = allowances, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot;, times = &quot;times&quot; ) summary(x) # # Classical Audit Sample Evaluation Summary # # Options: # Confidence level: 0.95 # Materiality: 0.05 # Hypotheses: H₀: Θ &gt;= 0.05 vs. H₁: Θ &lt; 0.05 # Method: poisson # # Data: # Sample size: 1604 # Number of errors: 401 # Sum of taints: 252.9281046 # # Results: # Most likely error: 0.15769 # 95 percent confidence interval: [0, 0.175] # Precision: 0.017311 # p-value: 1 In this case, the output shows that the estimate of the misstatement in the population is 15.77%, with the 95% (one-sided) confidence interval ranging from 0% to 17.5%. 6.3.2 Bayesian evaluation The call below evaluates the allowances sample using a Bayesian non-stratified evaluation procedure. x &lt;- evaluation( materiality = 0.05, data = allowances, prior = TRUE, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot;, times = &quot;times&quot; ) summary(x) # # Bayesian Audit Sample Evaluation Summary # # Options: # Confidence level: 0.95 # Materiality: 0.05 # Hypotheses: H₀: Θ &gt; 0.05 vs. H₁: Θ &lt; 0.05 # Method: poisson # Prior distribution: gamma(α = 1, β = 1) # # Data: # Sample size: 1604 # Number of errors: 401 # Sum of taints: 252.9281046 # # Results: # Posterior distribution: gamma(α = 253.928, β = 1605) # Most likely error: 0.15759 # 95 percent credible interval: [0, 0.17489] # Precision: 0.0173 # BF₁₀: 0 The output shows that the estimate of the misstatement in the population is 15.76%, with the 95% (one-sided) credible interval ranging from 0% to 17.49%. "],["CHAPTER-STRATIFIED-EVALUATION.html", "Chapter 7 Stratified Evaluation", " Chapter 7 Stratified Evaluation In a stratified sampling procedure, the auditor takes samples from different strata (or subgroups) in a population. An example of such a situation would be a group audit where the audited organization consists of different components or branches. Stratification is relevant for the group auditor if they must form an opinion on the group as a whole because they must aggregate the samples taken by the component auditors. As a data example, consider the retailer data set that comes with the package. The organization in question consists of 20 branches across the country. In each of the 20 strata, a component auditor has taken a statistical sample and reported the outcomes to the group auditor. data(retailer) stratum items samples errors 1 5000 300 21 2 5000 300 16 3 5000 300 15 4 5000 300 14 5 5000 300 16 6 5000 150 5 7 5000 150 4 8 5000 150 3 9 5000 150 4 10 5000 150 5 11 10000 50 2 12 10000 50 3 13 10000 50 2 14 10000 50 1 15 10000 50 0 16 10000 15 0 17 10000 15 0 18 10000 15 0 19 10000 15 1 20 4000 15 3 In general, there are three approaches to evaluating a stratified sample: no pooling, complete pooling, and partial pooling (see Derks et al., 2022). When using evaluation(), you must to indicate which type of pooling to use via the pooling argument. No pooling assumes no similarities between strata, which means that all strata are analyzed independently. Complete pooling assumes no difference between strata, which means that all data is aggregated and analyzed as a whole. Finally, partial pooling assumes differences and similarities between strata, which means that information can be shared between strata. Partial pooling (i.e., multilevel/hierarchical modeling) is a powerful technique that can result in more efficient population and stratum estimates but is currently only feasible when performing a Bayesian analysis. For this reason, this vignette only describes the Bayesian approach to stratified evaluation but going from this approach to a classical approach only requires setting prior = FALSE. The number of units per stratum in the population can be provided with N.units to weigh the stratum estimates to determine population estimate. This is called poststratification. If N.units is not specified, each stratum is assumed to be equally represented in the population. "],["approach-1-no-pooling.html", "7.1 Approach 1: No pooling", " 7.1 Approach 1: No pooling No pooling (pooling = \"none\", default) assumes no similarities between strata. This means that the prior distribution specified through prior is applied independently for each stratum. This allows for independent estimates for the misstatement in each stratum but also results in a relatively high uncertainty in the population estimate. The call below evaluates the sample using a Bayesian stratified evaluation procedure, in which the stratum estimates are poststratified to arrive at the population estimate. set.seed(1) # Important because the posterior distribution is determined via sampling result_np &lt;- evaluation( materiality = 0.05, method = &quot;binomial&quot;, prior = TRUE, n = retailer$samples, x = retailer$errors, N.units = retailer$items, alternative = &quot;two.sided&quot;, pooling = &quot;none&quot; ) summary(result_np) # # Bayesian Audit Sample Evaluation Summary # # Options: # Confidence level: 0.95 # Population size: 144000 # Materiality: 0.05 # Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 # Method: binomial # Prior distribution: Determined via MCMC sampling # # Data: # Sample size: 2575 # Number of errors: 115 # Sum of taints: 115 # # Results: # Posterior distribution: Determined via MCMC sampling # Most likely error: 0.058487 # 95 percent credible interval: [0.042763, 0.082201] # Precision: 0.023714 # BF₁₀: 0 # # Strata (20): # N n x t mle lb ub precision # 1 5000 300 21 21 0.07000 0.04637 0.10467 0.03467 # 2 5000 300 16 16 0.05333 0.03324 0.08489 0.03156 # 3 5000 300 15 15 0.05000 0.03069 0.08086 0.03086 # 4 5000 300 14 14 0.04667 0.02816 0.07681 0.03014 # 5 5000 300 16 16 0.05333 0.03324 0.08489 0.03156 # 6 5000 150 5 5 0.03333 0.01472 0.07558 0.04225 # 7 5000 150 4 4 0.02667 0.01084 0.06643 0.03977 # 8 5000 150 3 3 0.02000 0.00726 0.05696 0.03696 # 9 5000 150 4 4 0.02667 0.01084 0.06643 0.03977 # 10 5000 150 5 5 0.03333 0.01472 0.07558 0.04225 # 11 10000 50 2 2 0.04000 0.01230 0.13459 0.09459 # 12 10000 50 3 3 0.06000 0.02178 0.16242 0.10242 # 13 10000 50 2 2 0.04000 0.01230 0.13459 0.09459 # 14 10000 50 1 1 0.02000 0.00478 0.10447 0.08447 # 15 10000 50 0 0 0.00000 0.00050 0.06978 0.06978 # 16 10000 15 0 0 0.00000 0.00158 0.20591 0.20591 # 17 10000 15 0 0 0.00000 0.00158 0.20591 0.20591 # 18 10000 15 0 0 0.00000 0.00158 0.20591 0.20591 # 19 10000 15 1 1 0.06667 0.01551 0.30232 0.23565 # 20 4000 15 3 3 0.20000 0.07266 0.45646 0.25646 In this case, the output of the summary() function shows that the estimate of the misstatement in the population is 5.85%, with the 95% credible interval ranging from 4.28% to 8.22%. The stratum estimates differ substantially from each other but are relatively uncertain. plot(result_np, type = &quot;estimates&quot;) The prior and posterior distribution for the population misstatement can be requested via the plot() function. plot(result_np, type = &quot;posterior&quot;) "],["approach-2-complete-pooling.html", "7.2 Approach 2: Complete pooling", " 7.2 Approach 2: Complete pooling Complete pooling (pooling = \"complete\") assumes no differences between strata. This has the advantages that data from all strata can be aggregated, which decreases the uncertainty in the population estimate compared to the no pooling approach. However, the disadvantage of this approach is that it does not facilitate the distinction between between strata, as every stratum receives the same estimate equal to that of the population. The call below evaluates the sample using a Bayesian stratified evaluation procedure, in which the strata are assumed to be the same. result_cp &lt;- evaluation( materiality = 0.05, method = &quot;binomial&quot;, prior = TRUE, n = retailer$samples, x = retailer$errors, N.units = retailer$items, alternative = &quot;two.sided&quot;, pooling = &quot;complete&quot; ) summary(result_cp) # # Bayesian Audit Sample Evaluation Summary # # Options: # Confidence level: 0.95 # Population size: 144000 # Materiality: 0.05 # Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 # Method: binomial # Prior distribution: beta(α = 1, β = 1) # # Data: # Sample size: 2575 # Number of errors: 115 # Sum of taints: 115 # # Results: # Posterior distribution: beta(α = 116, β = 2461) # Most likely error: 0.04466 # 95 percent credible interval: [0.03735, 0.053345] # Precision: 0.0086852 # BF₁₀: 0.022725 # # Strata (20): # N n x t mle lb ub precision bf10 # 1 5000 300 21 21 0.04466 0.03735 0.05335 0.00869 0.02273 # 2 5000 300 16 16 0.04466 0.03735 0.05335 0.00869 0.02273 # 3 5000 300 15 15 0.04466 0.03735 0.05335 0.00869 0.02273 # 4 5000 300 14 14 0.04466 0.03735 0.05335 0.00869 0.02273 # 5 5000 300 16 16 0.04466 0.03735 0.05335 0.00869 0.02273 # 6 5000 150 5 5 0.04466 0.03735 0.05335 0.00869 0.02273 # 7 5000 150 4 4 0.04466 0.03735 0.05335 0.00869 0.02273 # 8 5000 150 3 3 0.04466 0.03735 0.05335 0.00869 0.02273 # 9 5000 150 4 4 0.04466 0.03735 0.05335 0.00869 0.02273 # 10 5000 150 5 5 0.04466 0.03735 0.05335 0.00869 0.02273 # 11 10000 50 2 2 0.04466 0.03735 0.05335 0.00869 0.02273 # 12 10000 50 3 3 0.04466 0.03735 0.05335 0.00869 0.02273 # 13 10000 50 2 2 0.04466 0.03735 0.05335 0.00869 0.02273 # 14 10000 50 1 1 0.04466 0.03735 0.05335 0.00869 0.02273 # 15 10000 50 0 0 0.04466 0.03735 0.05335 0.00869 0.02273 # 16 10000 15 0 0 0.04466 0.03735 0.05335 0.00869 0.02273 # 17 10000 15 0 0 0.04466 0.03735 0.05335 0.00869 0.02273 # 18 10000 15 0 0 0.04466 0.03735 0.05335 0.00869 0.02273 # 19 10000 15 1 1 0.04466 0.03735 0.05335 0.00869 0.02273 # 20 4000 15 3 3 0.04466 0.03735 0.05335 0.00869 0.02273 For example, the output of the summary() function shows that the estimate of the misstatement in the population is 4.47%, with the 95% credible interval ranging from 3.74% to 5.33%. Since the data is aggregated, the stratum estimates contain relatively little uncertainty. However, the probability of misstatement in stratum 20 (many misstatements) under this assumption is the same as that of stratum 15 (few misstatements). plot(result_cp, type = &quot;estimates&quot;) The prior and posterior distribution for the population misstatement can be requested via the plot() function. plot(result_cp, type = &quot;posterior&quot;) "],["approach-3-partial-pooling.html", "7.3 Approach 3: Partial pooling", " 7.3 Approach 3: Partial pooling Finally, partial pooling (pooling = \"partial\") assumes differences and similarities between strata. This allows the auditor to differentiate between strata, while also sharing information between the strata to reduce uncertainty in the population estimate. The call below evaluates the sample using a Bayesian stratified evaluation procedure, in which the stratum estimates are poststratified to arrive at the population estimate. set.seed(1) # Important because the posterior distribution is determined via sampling result_pp &lt;- evaluation( materiality = 0.05, method = &quot;binomial&quot;, prior = TRUE, n = retailer$samples, x = retailer$errors, N.units = retailer$items, alternative = &quot;two.sided&quot;, pooling = &quot;partial&quot; ) summary(result_pp) # # Bayesian Audit Sample Evaluation Summary # # Options: # Confidence level: 0.95 # Population size: 144000 # Materiality: 0.05 # Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 # Method: binomial # Prior distribution: Determined via MCMC sampling # # Data: # Sample size: 2575 # Number of errors: 115 # Sum of taints: 115 # # Results: # Posterior distribution: Determined via MCMC sampling # Most likely error: 0.043714 # 95 percent credible interval: [0.034206, 0.053522] # Precision: 0.0098086 # BF₁₀: 0.019031 # # Strata (20): # N n x t mle lb ub precision # 1 5000 300 21 21 0.04809 0.03814 0.08017 0.03207 # 2 5000 300 16 16 0.04569 0.03328 0.06816 0.02247 # 3 5000 300 15 15 0.04497 0.03207 0.06407 0.01909 # 4 5000 300 14 14 0.04433 0.03043 0.06220 0.01787 # 5 5000 300 16 16 0.04620 0.03281 0.06708 0.02088 # 6 5000 150 5 5 0.04348 0.02367 0.05968 0.01620 # 7 5000 150 4 4 0.04126 0.02088 0.05677 0.01551 # 8 5000 150 3 3 0.04164 0.01846 0.05501 0.01337 # 9 5000 150 4 4 0.04229 0.02137 0.05677 0.01448 # 10 5000 150 5 5 0.04181 0.02328 0.05844 0.01663 # 11 10000 50 2 2 0.04410 0.02417 0.06688 0.02278 # 12 10000 50 3 3 0.04418 0.02616 0.07366 0.02948 # 13 10000 50 2 2 0.04318 0.02261 0.06669 0.02351 # 14 10000 50 1 1 0.04280 0.01993 0.06367 0.02087 # 15 10000 50 0 0 0.04234 0.01641 0.05928 0.01694 # 16 10000 15 0 0 0.04331 0.02039 0.06699 0.02369 # 17 10000 15 0 0 0.04424 0.02027 0.06700 0.02276 # 18 10000 15 0 0 0.04330 0.01984 0.06587 0.02257 # 19 10000 15 1 1 0.04293 0.02313 0.07342 0.03049 # 20 4000 15 3 3 0.04527 0.03047 0.10417 0.05889 In this case, the output shows that the estimate of the misstatement in the population is 4.34%, with the 95% credible interval ranging from 3.45% to 5.33%. Note that this population estimate is substantially less uncertain than that of the no pooling approach. Note that, like in the no pooling approach, the stratum estimates are different from each other but lie closer together and are less uncertain. plot(result_pp, type = &quot;estimates&quot;) The prior and posterior distribution for the population misstatement can be requested via the plot() function. plot(result_pp, type = &quot;posterior&quot;) "],["evaluation-using-data-1.html", "7.4 Evaluation using data", " 7.4 Evaluation using data For this example, we take the allowances that set that comes with the package. This data set contains 3500 financial statement line items, each with a booked value bookValue and, for illustrative purposes, and audited (true) value auditValue. Since the focus of this vignette is the evaluation stage in the audit, the sample is already indicated in the data set. The performance materiality in this example is set to 5%. data(allowances) #head(allowances) Evaluating a stratified sample using data requires specification of the data, values, values.audit and strata arguments in the evaluation() function. In this case, the units are monetary and calculated by aggregating the book values of the items in each stratum. N.units &lt;- aggregate(allowances$bookValue, list(allowances$branch), sum)$x 7.4.1 Classical Evaluation The call below evaluates the allowances sample using a classical stratified evaluation procedure, in which the stratum estimates are poststratified to arrive at the population estimate. x &lt;- evaluation( materiality = 0.05, data = allowances, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot;, strata = &quot;branch&quot;, times = &quot;times&quot;, alternative = &quot;two.sided&quot;, N.units = N.units ) summary(x) # # Classical Audit Sample Evaluation Summary # # Options: # Confidence level: 0.95 # Population size: 16772249 # Materiality: 0.05 # Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 # Method: poisson # # Data: # Sample size: 1604 # Number of errors: 401 # Sum of taints: 252.9281046 # # Results: # Most likely error: 0.14723 # 95 percent confidence interval: [0.12549, 0.18239] # Precision: 0.03516 # p-value: NA # # Strata (16): # N n x t mle lb ub precision p.value # 1 317200.09 87 6 1.27814 0.01469 0.00073 0.06950 0.05481 0.46285 # 2 2792814.33 305 233 193.23313 0.63355 0.54558 0.72945 0.09590 0.00000 # 3 1144231.69 55 3 3.00000 0.05455 0.01105 0.15940 0.10486 0.75827 # 4 414202.89 70 45 15.05094 0.21501 0.11878 0.35434 0.13933 0.00000 # 5 96660.53 18 1 0.64537 0.03585 0.00015 0.27456 0.23871 0.59343 # 6 348006.13 34 1 0.17866 0.00525 0.00000 0.11926 0.11401 1.00000 # 7 2384079.33 55 14 9.44448 0.17172 0.07885 0.32122 0.14950 0.00058 # 8 1840399.33 96 1 0.00813 0.00008 0.00000 0.03860 0.03852 0.10355 # 9 563957.70 92 0 0.00000 0.00000 0.00000 0.04010 0.04010 0.01783 # 10 3198877.73 201 7 0.92023 0.00458 0.00009 0.02703 0.02245 0.00122 # 11 1983299.06 128 7 1.50034 0.01172 0.00084 0.05013 0.03841 0.10773 # 12 319144.13 86 5 1.68141 0.01955 0.00174 0.07806 0.05851 0.46069 # 13 148905.79 25 0 0.00000 0.00000 0.00000 0.14756 0.14756 0.64187 # 14 513058.76 150 0 0.00000 0.00000 0.00000 0.02459 0.02459 0.00134 # 15 432007.61 150 39 21.80000 0.14533 0.09026 0.22045 0.07511 0.00001 # 16 275403.70 52 39 4.18726 0.08052 0.02237 0.20215 0.12163 0.12258 In this case, the output shows that the estimate of the misstatement in the population is 14.72%, with the 95% confidence interval ranging from 12.55% to 18.26%. The precision of the population estimate is 3.54%. The stratum estimates can be seen in the output of the summary() function and are visualized below. plot(x, type = &quot;estimates&quot;) 7.4.2 Bayesian Evaluation Bayesian inference can improve upon the estimates of the classical approach by pooling information between strata where possible. The call below evaluates the allowances sample using a Bayesian multilevel stratified evaluation procedure, in which the stratum estimates are poststratified to arrive at the population estimate. x &lt;- evaluation( materiality = 0.05, data = allowances, prior = TRUE, values = &quot;bookValue&quot;, values.audit = &quot;auditValue&quot;, strata = &quot;branch&quot;, times = &quot;times&quot;, alternative = &quot;two.sided&quot;, N.units = N.units, pooling = &quot;partial&quot; ) summary(x) # # Bayesian Audit Sample Evaluation Summary # # Options: # Confidence level: 0.95 # Population size: 16772249 # Materiality: 0.05 # Hypotheses: H₀: Θ = 0.05 vs. H₁: Θ ≠ 0.05 # Method: poisson # Prior distribution: Determined via MCMC sampling # # Data: # Sample size: 1350 # Number of errors: 401 # Sum of taints: 224.657517 # # Results: # Posterior distribution: Determined via MCMC sampling # Most likely error: 0.1555 # 95 percent credible interval: [0.1458, 0.17009] # Precision: 0.014595 # BF₁₀: 3.1386e+15 # # Strata (16): # N n x t mle lb ub precision # 1 317200.09 62 6 1.07814 0.02037 0.01356 0.03659 0.01622 # 2 2792814.33 283 233 176.87807 0.60930 0.57298 0.65128 0.04198 # 3 1144231.69 55 3 3.00000 0.16735 0.11682 0.24582 0.07847 # 4 414202.89 48 45 11.65094 0.27653 0.22254 0.34868 0.07214 # 5 96660.53 9 1 0.21512 0.02207 0.01055 0.08932 0.06725 # 6 348006.13 14 1 0.04467 0.01233 0.00723 0.04022 0.02790 # 7 2384079.33 44 14 6.65401 0.13637 0.09156 0.21540 0.07903 # 8 1840399.33 78 1 0.00813 0.00640 0.00458 0.00961 0.00320 # 9 563957.70 74 0 0.00000 0.00608 0.00461 0.00957 0.00349 # 10 3198877.73 184 7 0.89982 0.00804 0.00615 0.01074 0.00270 # 11 1983299.06 111 7 1.35066 0.01525 0.01077 0.02243 0.00718 # 12 319144.13 56 5 1.19069 0.08428 0.05625 0.14502 0.06074 # 13 148905.79 10 0 0.00000 0.01216 0.00636 0.04545 0.03329 # 14 513058.76 150 0 0.00000 0.00472 0.00377 0.00633 0.00161 # 15 432007.61 128 39 18.30000 0.27398 0.23217 0.33730 0.06332 # 16 275403.70 44 39 3.38726 0.07640 0.05784 0.10161 0.02521 The output shows that the estimate of the misstatement in the population is 15.66%, with the 95% credible interval ranging from 14.59% to 17%. The precision of the population estimate is 1.34%, which is substantially lower than that of the classical approach. The stratum estimates can be seen in the output of the summary() function and are visualized below. plot(x, type = &quot;estimates&quot;) The prior and posterior distribution for the population misstatement can be requested via the plot() function. plot(x, type = &quot;posterior&quot;) "],["CHAPTER-OTHER-SOFTWARE.html", "Chapter 8 Other Software", " Chapter 8 Other Software This chapter discusses other open-source (non-R) software implementing statistical techniques for audit sampling. "],["jasp-for-audit.html", "8.1 JASP for audit", " 8.1 JASP for audit JASP for Audit is an add-on module for JASP that facilitates statistical audit sampling. Among other things, the module provides functionality for planning, performing, evaluating, and reporting a statistical audit sample. More concretely, it contains analyses for calculating sample sizes, selecting itms according to standard audit sampling techniques, and performing inference about the population misstatement on the basis of a data sample or summary statistics of a sample. The module also features Bayesian equivalents of these analyses that enable the user to easily incorporate prior information into the statistical procedure. In all analyses, the Audit module offers explanatory text that helps the auditor in interpreting, explaining, and reporting the analysis. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
