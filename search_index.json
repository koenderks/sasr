[["index.html", "Statistical Auditing with R, 1st Edition Welcome", " Statistical Auditing with R, 1st Edition Koen Derks 2022-12-15 Welcome Welcome to the book Statistical Auditing with R, a practical guide for auditors that want to use state-of-the-art statistical methodology in the audit. This book focuses on two auditing procedures that are commonly performend in a statistical manner: audit sampling and data auditing. It explains the underlying statistical auditing theory from a classical and Bayesian point of view and demonstrates how to perform these procedures in a sound manner compliant with international auditing standards using the jfa (Derks 2022) R package. Please keep in mind that this is a preview release and a number of chapters are still missing. If you are missing some of the content today, then check back tomorrow: This book is actively being worked on. References "],["preface.html", "Preface", " Preface This book is for auditors who want to use statistical methodology in the audit using the statistical programming language R. It thoroughly, but understandably, covers an array of statistical techniques available to auditors, explaining what they are, the assumptions on which they are based, and when they should be used. Furthermore, it offers concrete suggestions for incorporating statistical methodology into audit practice and demonstrates its usefulness using practical case studies. Hopefully, this book can be a resource for the efficient and effective use of statistical methods in audit practice. This book adresses the need for a transparent and clear description of the application of statistical methods in audit practice. I have found that most guidance about statistics in auditing and implementations of these methods are often untransparent and closed-source tools with insufficient detail to allow for transparent reproduction (e.g., closed Excel sheets) and understanding. As such, many questions about how results come to be are left unanswered. This book aims to provide full control to the auditor when it comes to explaining the statistical methodology used. This book focuses on two auditing procedures that are commonly performend in a statistical manner: audit sampling and data auditing. It explains the underlying statistical auditing theory from a classical and Bayesian point of view and demonstrates how to perform these procedures in a sound manner compliant with international auditing standards. Bayesian auditing procedures can have great benefits for auditors in practice and this book will elaborate on each of them. In part 1, Chapter 1 provides an introduction to the R programming language. Chapter 2 gives a brief overview of how statistical methodology can be applied in the audit. In part 2, Chapter 3 discusses the basic statistical theory underlying audit sampling. Chapter 4 discusses the standard audit sampling workflow. Chapter 5, 6, 7, and 8 go into more detail about using statistial methods to plan, select and evaluate audit samples. Finally, Chapter 9 discusses other software implementations of audit sampling. In part 3, Chapter 10 gives an overview of the basic statistical theory underlying data auditing. "],["CHAPTER-R-BASICS.html", "Chapter 1 R Basics", " Chapter 1 R Basics This chapter covers the basics: installing and using packages and loading data. "],["installing-a-package.html", "1.1 Installing a Package", " 1.1 Installing a Package This book illustrates its concepts and ideas using the jfa package, which can be downloaded from CRAN. You can install this package by running the command below in R: install.packages(&quot;jfa&quot;) "],["loading-a-package.html", "1.2 Loading a Package", " 1.2 Loading a Package To load a package into your R session, call library() and provide the name of the package you want to load. Naturally, this requires that you already have the package installed on the computer. For example, before running the examples in this book, you can load the jfa package with: library(jfa) Note If you want a deeper understanding of how the jfa package works, or want to look at the source code of the package, see the package website. Packages in R are collections of functions and/or data that are bundled up for easy distribution, and installing a package will extend the functionality of R on your computer. If an R user creates a package and thinks that it might be useful for others, that user can distribute it through a package repository. The primary repository for distributing R packages is called CRAN (the Comprehensive R Archive Network), but there are others, such as Bioconductor, which specializes in packages related to genomic data. If you have spent much time learning R, you may have heard of the tidyverse, which is a collection of R packages that share common ideas of how data should be structured and manipulated. This is in contrast to base R, which is the set of packages that are included when you just download and install R. The tidyverse is a set of add-ons for R, which make it easier to do many operations related to data manipulation and visualization. This book mostly uses the tidyverse, as I believe that it provides a quicker and simpler (but not less powerful!) way to work with data. "],["upgrading-a-package.html", "1.3 Upgrading a Package", " 1.3 Upgrading a Package To update a package in your R library, call update.packages() and provide the name of the package you want to update. For example, you can update the jfa package with: update.packages(&quot;jfa&quot;) "],["loading-a-delimited-text-data-file.html", "1.4 Loading a Delimited Text Data File", " 1.4 Loading a Delimited Text Data File 1.4.1 Problem You want to load data from a delimited text file. 1.4.2 Solution The most common way to read in a file is to use comma-separated values (CSV) data: data &lt;- read.csv(&quot;datafile.csv&quot;) Alternatively, you can use the read_csv() function (note the underscore instead of period) from the readr package. This function is significantly faster than read.csv(), and 1.4.3 Discussion Since data files have many different formats, there are many options for loading them. For example, if the data file does not have headers in the first row: data &lt;- read.csv(&quot;datafile.csv&quot;, header = FALSE) The resulting data frame will have columns named V1, V2, and so on, and you will probably want to rename them manually: # Manually assign the header names names(data) &lt;- c(&quot;Column1&quot;, &quot;Column2&quot;, &quot;Column3&quot;) You can set the delimiter with sep. If it is space-delimited, use sep = \" \". If it is tab-delimited, use \\t, as in: data &lt;- read.csv(&quot;datafile.csv&quot;, sep = &quot;\\t&quot;) By default, strings in the data are treated as factors. Suppose this is your data file, and you read it in using read.csv(): &quot;First&quot;,&quot;Last&quot;,&quot;Sex&quot;,&quot;Number&quot; &quot;Currer&quot;,&quot;Bell&quot;,&quot;F&quot;,2 &quot;Dr.&quot;,&quot;Seuss&quot;,&quot;M&quot;,49 &quot;&quot;,&quot;Student&quot;,NA,21 The resulting data frame will store First and Last as factors, though it makes more sense in this case to treat them as strings (or character vectors in R terminology). To differentiate this, use stringsAsFactors = FALSE. If there are any columns that should be treated as factors, you can then convert them individually: data &lt;- read.csv(&quot;datafile.csv&quot;, stringsAsFactors = FALSE) # Convert to factor data$Sex &lt;- factor(data$Sex) str(data) #&gt; &#39;data.frame&#39;: 3 obs. of 4 variables: #&gt; $ First : chr &quot;Currer&quot; &quot;Dr.&quot; &quot;&quot; #&gt; $ Last : chr &quot;Bell&quot; &quot;Seuss&quot; &quot;Student&quot; #&gt; $ Sex : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 1 2 NA #&gt; $ Number: int 2 49 21 Alternatively, you could load the file with strings as factors, and then convert individual columns from factors to characters. 1.4.4 See Also read.csv() is a convenience wrapper function around read.table(). If you need more control over the input, see ?read.table. "],["loading-data-from-an-excel-file.html", "1.5 Loading Data from an Excel File", " 1.5 Loading Data from an Excel File 1.5.1 Problem You want to load data from an Excel file. 1.5.2 Solution The readxl package has the function read_excel() for reading .xls and .xlsx files from Excel. This will read the first sheet of an Excel spreadsheet: # Only need to install once install.packages(&quot;readxl&quot;) library(readxl) data &lt;- read_excel(&quot;datafile.xlsx&quot;, 1) 1.5.3 Discussion With read_excel(), you can load from other sheets by specifying a number for sheetIndex or a name for sheetName: data &lt;- read_excel(&quot;datafile.xls&quot;, sheet = 2) data &lt;- read_excel(&quot;datafile.xls&quot;, sheet = &quot;Revenues&quot;) read_excel() uses the first row of the spreadsheet for column names. If you donâ€™t want to use that row for column names, use col_names = FALSE. The columns will instead be named X1, X2, and so on. By default, read_excel() will infer the type of each column, but if you want to specify the type of each column, you can use the col_types argument. You can also drop columns if you specify the type as \"blank\". # Drop the first column, and specify the types of the next three columns data &lt;- read_excel(&quot;datafile.xls&quot;, col_types = c(&quot;blank&quot;, &quot;text&quot;, &quot;date&quot;, &quot;numeric&quot;)) 1.5.4 See Also See ?read_excel for more options controlling the reading of these files. There are other packages for reading Excel files. The gdata package has a function read.xls() for reading in .xls files, and the xlsx package has a function read.xlsx() for reading in .xlsx files. They require external software to be installed on your computer: read.xls() requires Java, and read.xlsx() requires Perl. "],["loading-data-from-spsssasstata-files.html", "1.6 Loading Data from SPSS/SAS/Stata Files", " 1.6 Loading Data from SPSS/SAS/Stata Files 1.6.1 Problem You want to load data from a SPSS file, or from other programs like SAS or Stata. 1.6.2 Solution The haven package has the function read_sav() for reading SPSS files. To load data from an SPSS file: # Only need to install the first time install.packages(&quot;haven&quot;) library(haven) data &lt;- read_sav(&quot;datafile.sav&quot;) 1.6.3 Discussion The haven package also includes functions to read from other formats: read_sas(): SAS read_dta(): Stata An alternative to haven is the foreign package. It also supports SPSS and Stata files, but it is not as up-to-date as the functions from haven. For example, it only supports Stata files up to version 12, while haven supports up to version 14 (the current version as of this writing). The foreign package does support some other formats, including: read.octave(): Octave and MATLAB read.systat():SYSTAT read.xport(): SAS XPORT read.dta(): Stata read.spss(): SPSS 1.6.4 See Also Run ls(\"package:foreign\") for a full list of functions in the foreign package. "],["CHAPTER-STATISTICS-IN-THE-AUDIT.html", "Chapter 2 Statistics in the Audit", " Chapter 2 Statistics in the Audit This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-AS-BASIC-CONCEPTS.html", "Chapter 3 Basic Concepts", " Chapter 3 Basic Concepts This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-AS-THE-AUDIT-SAMPLING-WORKFLOW.html", "Chapter 4 The Audit Sampling Workflow", " Chapter 4 The Audit Sampling Workflow This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-AS-PLANNING-AUDIT-SAMPLES.html", "Chapter 5 Planning Audit Samples", " Chapter 5 Planning Audit Samples This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-AS-SELECTING-AUDIT-SAMPLES.html", "Chapter 6 Selecting Audit Samples", " Chapter 6 Selecting Audit Samples This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-AS-UNSTRATIFIED-EVALUATION-OF-AUDIT-SAMPLES.html", "Chapter 7 Unstratified Evaluation of Audit Samples", " Chapter 7 Unstratified Evaluation of Audit Samples This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-AS-STRATIFIED-EVALUATION-OF-AUDIT-SAMPLES.html", "Chapter 8 Stratified Evaluation of Audit Samples", " Chapter 8 Stratified Evaluation of Audit Samples This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-AS-OTHER-SOFTWARE-IMPLEMENTATTIONS.html", "Chapter 9 Other Software Implementations", " Chapter 9 Other Software Implementations This chapter covers the basics: installing and using packages and loading data. "],["CHAPTER-DA-BASIC-CONCEPTS.html", "Chapter 10 Basic Concepts", " Chapter 10 Basic Concepts This chapter covers the basics: installing and using packages and loading data. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
