```{r echo = FALSE, cache = FALSE}
source("utils.R", local = TRUE)
```

::: {.callout-note appearance="simple"}
You are reading the work-in-progress first edition of Statistical Auditing with
R. This chapter should be readable but is currently undergoing final polishing.
:::

# Other Software {#CHAPTER-7}

This chapter discusses other R-related open-source software implementing
statistical techniques for audit sampling.

## JASP for Audit

JASP for Audit [@Derks2021_jasp] is an add-on module for
[JASP](http://jasp-stats.org/) [@JASP], based on the **jfa** package, that
facilitates statistical audit sampling. Concretely, it contains graphical user
interfaces (GUI's) for calculating sample sizes, selecting items according to
standard audit sampling techniques, and performing inference about the
population misstatement on the basis of a data sample or summary statistics of a
sample. The module also features Bayesian equivalents of these analyses that
enable the user to easily incorporate prior information into the statistical
procedure. In all analyses, the Audit module offers explanatory text that helps
the auditor in interpreting, explaining, and reporting the analysis. Since JASP
for Audit is an R-based GUI around **jfa**, its functionality can be mapped
almost one-on-one to that of the package.

![Figure 7.1: The JASP welcome screen.](img/JASP.png){fig-align="center"}

### Planning

In order to plan a sample for an audit using JASP, the process is similar to
using **jfa**. For example, the screenshot below shows how to plan a minimum
sample size for a performance materiality of 5% using a beta(1, 1) prior
distribution, while expecting zero misstatements in the sample.

![Figure 7.2: The JASP interface for planning a sample.](img/JASP_planning.png){fig-align="center"}

In **jfa**, these results can be reproduced via the following command:

```{r}
planning(materiality = 0.05, likelihood = "binomial", prior = TRUE)
```

### Selection

Selecting a sample in JASP for Audit works similar to how you would do it in
**jfa**. For example, the screenshot below shows how to select a sample of 60
monetary units from the `BuildIt` data set that is included in the package using
a fixed interval sampling method with a starting point of 1.

```{r}
set.seed(1)
data(BuildIt)
result <- selection(data = BuildIt, size = 60, units = "values",
                    method = "interval", start = 1, values = "bookValue")
head(result$sample)
```

![Figure 7.3: The JASP interface for selecting a sample.](img/JASP_selection.png){fig-align="center"}

### Evaluation

Evaluating a sample in JASP for Audit works similar to how you would do it in
**jfa**. For example, the screenshot below shows how to evaluating a sample of
$n = 60$ containing $x = 0$ misstatements against a performance materiality of
5% using a beta(1, 1) prior distribution.

![Figure 7.4: The JASP interface for evaluating a sample.](img/JASP_evaluation.png){fig-align="center"}

In **jfa**, these results can be reproduced via the following command:

```{r}
evaluation(materiality = 0.03, method = "binomial", x = 2, n = 93,
           prior = TRUE)
```

## R Packages

### MUS

**MUS** [@MUS] is an R package providing sampling and evaluation methods to
apply Monetary Unit Sampling during an audit of financial statements. The
package is available via [CRAN](https://cran.r-project.org/package=MUS) and can
be downloaded by running the following code:

```{r, eval=FALSE}
install.packages("MUS")
```

Note that the **MUS** package provides no functionality for Bayesian audit
sampling.

### audit

**audit** [@audit] is an R package based on the paper by @Meeden2007 that can be
used to find an upper bound for the total amount of overstatement of assets in a
set of accounts and estimating the amount of sales tax owed on a collection of
transactions. The package is available via [CRAN](https://cran.r-project.org/package=audit)
and can be downloaded by running the following code:

```{r, eval=FALSE}
install.packages("audit")
```

Note that the **audit** package provides limited functionality for evaluating
audit samples and has no functionality for planning and selecting audit samples.

### samplingbook

**samplingbook** [@samplingbook] is an R package based on the book
**Stichproben: Methoden und praktische Umsetzung mit R** [@Kauermann2010] that
focuses on survey sampling and statistical analysis of these samples. The
package is available via [CRAN](https://cran.r-project.org/package=samplingbook)
and can be downloaded by running the following code:

```{r, eval=FALSE}
install.packages("samplingbook")
```

Note that the **samplingbook** package provides limited functionality for
auditing as it mainly focuses on survey sampling.
